<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on M.Ikeの小ネタ集</title>
    <link>https://mike-neko.github.io/tags/server/</link>
    <description>Recent content in Server on M.Ikeの小ネタ集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 06 Dec 2016 22:04:28 +0900</lastBuildDate>
    <atom:link href="https://mike-neko.github.io/tags/server/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>multipart/form-dataによるファイルのアップロード</title>
      <link>https://mike-neko.github.io/blog/multipart/</link>
      <pubDate>Tue, 06 Dec 2016 22:04:28 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/multipart/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;（&lt;code&gt;Alamofire&lt;/code&gt;とかのライブラリを使った方が幸せになれると思うが）
HTMLのフォームからの送信と同じ様な&lt;code&gt;multipart&lt;/code&gt;によるアップロードをiOSからする方法&lt;/p&gt;

&lt;h2 id=&#34;要件&#34;&gt;要件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タイトル（文字列）とファイルを一緒にサーバへアップロード&lt;/li&gt;
&lt;li&gt;アップロード先は同じホストの&lt;code&gt;upload.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;サーバからはjsonで結果が返ってくる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;htmlの場合&#34;&gt;HTMLの場合&lt;/h2&gt;

&lt;p&gt;上記要件でかつアップロードと同じ画面内で結果を表示させたい場合、
&lt;code&gt;jQuery&lt;/code&gt;などを全く使わずに素のHTMLで書くと&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/9c53de2d62a4be94dd26131479b52c6f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;もし、ajaxではなく送信結果は次の画面で表示させる様な場合だと&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;タグは
&lt;code&gt;&amp;lt;form name=&amp;quot;upload&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot; action=&amp;quot;upload.php&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;&lt;/code&gt;
とする必要がある&lt;/p&gt;

&lt;h2 id=&#34;iosの場合&#34;&gt;iOSの場合&lt;/h2&gt;

&lt;p&gt;もし単一のファイルのアップロードだけなら、&lt;code&gt;URLSession&lt;/code&gt;の&lt;code&gt;uploadTask(with:〜&lt;/code&gt;でOKだが、
他のデータやファイルも付加したい場合は自分で&lt;code&gt;multipart&lt;/code&gt;のリクエストを生成する必要がある&lt;/p&gt;

&lt;p&gt;とりあえずHTMLと同じものをベタ書き(+エラー省略)すると、&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/3825cf1ea22cb4f1a1469a33c44097ff.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;boundary文字列&#34;&gt;boundary文字列&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;multipart&lt;/code&gt;の場合、データの区切りを表すためにデータ内に含まれない様なバウンダリ文字列が必要となる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let boundary = String(format: &amp;quot;----iOSURLSessionBoundary.%08x%08x&amp;quot;, arc4random(), arc4random())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は&lt;code&gt;Alamofire&lt;/code&gt;を参考に送信元のプログラムとランダムな数字を組合せた文字列を生成している&lt;/p&gt;

&lt;h3 id=&#34;bodyの生成&#34;&gt;bodyの生成&lt;/h3&gt;

&lt;p&gt;フォームのデータの場合の構造は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--(バウンダリ文字列)[CRLF]
Content-Disposition: form-data; name=&amp;quot;フォームの名前&amp;quot;[CRLF]
[CRLF]
(フォームのデータ)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる&lt;/p&gt;

&lt;p&gt;ファイルの場合の構造は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--(バウンダリ文字列)[CRLF]
Content-Disposition: form-data; name=&amp;quot;フォームの名前&amp;quot;; filename=&amp;quot;ファイル名&amp;quot;[CRLF]
Content-Type: &amp;quot;ファイルのタイプ&amp;quot;[CRLF]
[CRLF]
(ファイルのデータ)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる&lt;/p&gt;

&lt;p&gt;各構造をバイナリ(&lt;code&gt;Data&lt;/code&gt;型)にしたものを必要な分だけ組合せて、最後に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--(バウンダリ文字列)--[CRLF]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をつけたものがbody部分のデータとなる&lt;/p&gt;

&lt;p&gt;今回の例だとフォームデータが一つとファイルデータが一つなので、
それぞれ一つずつを追加し最後にフッタを付けたものをbodyに入れている&lt;/p&gt;

&lt;h3 id=&#34;headerの生成&#34;&gt;headerの生成&lt;/h3&gt;

&lt;p&gt;フィールドにセットすべきなのは以下の2つ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;Content-Type&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Content-Length&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Content-Type&lt;/code&gt;にはタイプとバウンダリ文字列を以下のように指定する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;multipart/form-data; boundary=（バウンダリ文字列）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Content-Length&lt;/code&gt;は普通にbodyのサイズを入れればOK&lt;/p&gt;

&lt;h3 id=&#34;送信&#34;&gt;送信&lt;/h3&gt;

&lt;p&gt;送信は&lt;code&gt;uploadTask&lt;/code&gt;だと&lt;code&gt;multipart&lt;/code&gt;指定ができないので&lt;code&gt;dataTask&lt;/code&gt;で行う。
それ以外は通常の&lt;code&gt;dataTask&lt;/code&gt;のやり方でOK&lt;/p&gt;

&lt;h2 id=&#34;参考-サーバの処理-php&#34;&gt;参考：サーバの処理(PHP)&lt;/h2&gt;

&lt;p&gt;今回サーバ側で検証用に使ったのは以下のソース&lt;br /&gt;
（送信されてきたファイルはそのまま専用のディレクトリに格納し結果をJSONで返すだけ）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// &amp;quot;upload&amp;quot;のディレクトリに書き込み権限が必要
$dir = __DIR__ . &#39;/upload/&#39;;
$path = $dir . basename($_FILES[&#39;filename&#39;][&#39;name&#39;]);

$data[&#39;result&#39;] = &#39;アップロード失敗&#39;;
if (move_uploaded_file($_FILES[&#39;filename&#39;][&#39;tmp_name&#39;], $path)) {
    chmod($path, 0666);
    $data[&#39;result&#39;] = date(&amp;quot;H:i:s&amp;quot;) . &#39; &#39; . $_POST[&#39;title&#39;] . &#39; アップロード成功&#39;;
}

header(&#39;Content-Type: application/json&#39;);
echo json_encode($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP公式：&lt;a href=&#34;http://php.net/manual/ja/features.file-upload.post-method.php&#34;&gt;POST メソッドによるアップロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN公式：&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/Guide/Using_FormData_Objects&#34;&gt;FormData オブジェクトの利用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Xcode 8.1&lt;/li&gt;
&lt;li&gt;iOS 9.3.2 / 10.1.1&lt;/li&gt;
&lt;li&gt;iPhone 6+ / 7+&lt;/li&gt;
&lt;li&gt;PHP 7&lt;/li&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>VPN上のWindows機へ接続</title>
      <link>https://mike-neko.github.io/blog/vpn-win/</link>
      <pubDate>Sun, 27 Nov 2016 22:50:47 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/vpn-win/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SSH&lt;/code&gt;が入っていないVPN上のWindowsへアクセスする方法&lt;/p&gt;

&lt;p&gt;この場合、踏み台となる&lt;code&gt;SSH&lt;/code&gt;が入った別のマシンが必要となる&lt;/p&gt;

&lt;p&gt;今回の検証環境は以下の通り&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ローカル：Mac OS 10.11(※)&lt;/li&gt;
&lt;li&gt;VPN

&lt;ul&gt;
&lt;li&gt;CentOS 6.8(踏み台)&lt;/li&gt;
&lt;li&gt;Windows(SQLServer)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;※ macOS 10.12(sierra)は&lt;code&gt;PPTP&lt;/code&gt;でのVPN接続がOSではサポートされていないので注意！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;接続のイメージは以下の通り&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Mac
     |
(VPN / SSH)
     |
   CentOS(192.168.10.1 / 踏み台) - Windows(192.168.10.2 / SQLServer)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remotedesktopでログイン&#34;&gt;RemoteDesktopでログイン&lt;/h2&gt;

&lt;p&gt;Windowsなので遠隔で操作するには&lt;code&gt;RemoteDesktop&lt;/code&gt;を利用&lt;/p&gt;

&lt;h3 id=&#34;sshの接続方法&#34;&gt;SSHの接続方法&lt;/h3&gt;

&lt;p&gt;以下の形式でSSH接続する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -C -L 3389:(WindowsのIP):3389 (踏み台のIP)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例えば、上述の環境でCentOSの&lt;code&gt;user&lt;/code&gt;でログインする場合だと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -C -L 3389:192.168.10.2:3389 user@192.168.10.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で接続する&lt;/p&gt;

&lt;h3 id=&#34;remotedesktopの設定&#34;&gt;RemoteDesktopの設定&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PC name:&lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User name: Windowsのユーザ名&lt;/li&gt;
&lt;li&gt;Password: Windowsのパスワード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ポイントはホストが&lt;code&gt;localhost&lt;/code&gt;になること&lt;/p&gt;

&lt;h2 id=&#34;sql-serverへ接続&#34;&gt;SQL Serverへ接続&lt;/h2&gt;

&lt;h3 id=&#34;sshの接続方法-1&#34;&gt;SSHの接続方法&lt;/h3&gt;

&lt;p&gt;以下の形式でSSH接続する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -C -L (DBのポート):(WindowsのIP):(DBのポート) (踏み台のIP)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例えば、上述の環境でCentOSの&lt;code&gt;user&lt;/code&gt;、SQLServerのポートが&lt;code&gt;1433&lt;/code&gt;でログインする場合だと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -C -L 1433:192.168.10.2:1433 user@192.168.10.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で接続する&lt;/p&gt;

&lt;h3 id=&#34;db接続設定&#34;&gt;DB接続設定&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ホスト:&lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ポート:1433&lt;/li&gt;
&lt;li&gt;DB名: そのまま&lt;/li&gt;
&lt;li&gt;DBユーザ: そのまま&lt;/li&gt;
&lt;li&gt;DBパスワード: そのまま&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>VagrantでCentOS6.8を使う </title>
      <link>https://mike-neko.github.io/blog/vagrant-cent/</link>
      <pubDate>Tue, 08 Nov 2016 21:32:51 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/vagrant-cent/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;野良BOXは自力で問題ないか検証するほどの腕がないので、公式BOXを利用しようとしたら、いろいろと落とし穴があったのでメモ&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt;を作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p （適当なフォルダ）
cd （上で作ったフォルダ）
vagrant init bento/centos-6.8
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt;を編集(サーバとして使いたいので以下のように編集)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: 8080
# ↓コメントを外す＋ポートは空いているものを指定
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 8010, host: 8010
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
# ↓コメントを外す＋IPは空いているものを指定
config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# Centos6.8限定で以下も追記(※1 詳細は後述)
config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--cableconnected1&amp;quot;, &amp;quot;on&amp;quot;]
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;起動する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up
vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;トラブルシューティング&#34;&gt;トラブルシューティング&lt;/h2&gt;

&lt;h3 id=&#34;vagrant-up-で-private-key-で先に進まずエラーになる&#34;&gt;vagrant up で private key で先に進まずエラーになる&lt;/h3&gt;

&lt;p&gt;エラーは以下の感じでCentOS6.8で発生(6.7は問題無し)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Timed out while waiting for the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured (&amp;quot;config.vm.boot_timeout&amp;quot; value) time period.

If you look above, you should be able to see the error(s) that
Vagrant had when attempting to connect to the machine. These errors
are usually good hints as to what may be wrong.

If you&#39;re using a custom box, make sure that networking is properly
working and you&#39;re able to connect to the machine. It is a common
problem that networking isn&#39;t setup properly in these boxes.
Verify that authentication configurations are also setup properly,
as well.

If the box appears to be booting properly, you may want to increase
the timeout (&amp;quot;config.vm.boot_timeout&amp;quot;) value.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;対応策&#34;&gt;対応策&lt;/h4&gt;

&lt;p&gt;ググると色々出てくるが、CentOS6.8で発生する場合は、前述の※1を&lt;code&gt;Vagrantfile&lt;/code&gt;に追記しておけば大丈夫。&lt;br /&gt;
（というか他の方法は効果なしだった・・・）&lt;/p&gt;

&lt;h3 id=&#34;ファイルの共有ができない&#34;&gt;ファイルの共有ができない&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;で以下のエラーが出ている&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant was unable to mount VirtualBox shared folders. This is usually
because the filesystem &amp;quot;vboxsf&amp;quot; is not available. This filesystem is
made available via the VirtualBox Guest Additions and kernel module.
Please verify that these guest additions are properly installed in the
guest. This is not a bug in Vagrant and is usually caused by a faulty
Vagrant box. For context, the command attempted was:
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;対応策-1&#34;&gt;対応策&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;まずはエラーを一旦無視してログインし、カーネルをアップデート&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
su                     # pass:&amp;quot;vagrant&amp;quot;
yum -y update kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アップデートが完了すれば&lt;code&gt;exit&lt;/code&gt;を2回でログアウトする&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Guest Additions&lt;/code&gt;をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant plugin install vagrant-vbguest
vagrant vbguest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リロードをかけてエラーが出なければOK&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant reload
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Mac 10.11&lt;/li&gt;
&lt;li&gt;VirtualBox 5.0.28&lt;/li&gt;
&lt;li&gt;Vagrant 1.8.6

&lt;ul&gt;
&lt;li&gt;CentOS6.7&lt;/li&gt;
&lt;li&gt;CentOS6.8&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CentOSからOracleへ接続</title>
      <link>https://mike-neko.github.io/blog/oracle-cent/</link>
      <pubDate>Thu, 03 Nov 2016 19:24:51 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/oracle-cent/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CentOSのPHP5.6から別サーバで動いているOracleのDBへ&lt;code&gt;oci8&lt;/code&gt;で接続する方法&lt;/p&gt;

&lt;p&gt;Macの場合は&lt;a href=&#34;../oracle-mac/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;oracleのドライバのインストール&#34;&gt;Oracleのドライバのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;サーバのアーキテクチャを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uname -a
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/database/features/instant-client/index.html&#34;&gt;Oracle Instant Client&lt;/a&gt;から
1で確認した環境の&lt;code&gt;basic&lt;/code&gt;と&lt;code&gt;SDK&lt;/code&gt;をダウンロードしサーバへ保存&lt;br /&gt;
(今回は&lt;code&gt;x86_64&lt;/code&gt;だったので&lt;code&gt;Version 12.1.0.2 (x86_64)&lt;/code&gt;の&lt;code&gt;rpm&lt;/code&gt;を選択。以降このバージョンが前提)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以下でインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd (保存した場所)
su
rpm -ivh oracle-instantclient12.1-basic-12.1.0.2.0-1.x86_64.rpm
rpm -ivh oracle-instantclient12.1-devel-12.1.0.2.0-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;パスを通す&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/profile
# 以下の行を追加
export LD_LIBRARY_PATH=/usr/lib/oracle/12.1/client64/lib:$LD_LIBRARY_PATH
export PATH=/usr/lib/oracle/12.1/client64/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追記したら保存して終了し&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で強制反映させる&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;peclのインストール&#34;&gt;peclのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;以下でインストール
&lt;code&gt;
yum -y install --enablerepo=remi --enablerepo=remi-php56 php-pear
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;oci8のインストール&#34;&gt;oci8のインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pecl&lt;/code&gt;からインストールするので&lt;code&gt;DTrace&lt;/code&gt;サポートを有効にする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y install systemtap-sdt-devel
export PHP_DTRACE=yes
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;ちなみにこれをしないと&lt;code&gt;error: oci8_dtrace_gen.h: No such file or director&lt;/code&gt;というエラーになる。
詳細は&lt;a href=&#34;http://php.net/manual/ja/oci8.dtrace.php&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;oci8&lt;/code&gt;をバージョン（Ver.2.0.12）を指定してインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pecl install oci8-2.0.12
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;oci8の最新版だとPHP7以降の為、2.0系を指定する&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;インストール中にプロンプトが出れば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;instantclient,/usr/lib/oracle/12.1/client64/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PHPの設定
&lt;code&gt;php.ini&lt;/code&gt;に以下を設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension=oci8.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（場所が判らない時は&lt;code&gt;php -i | grep php.ini&lt;/code&gt;）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php --ri oci8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;（略）
OCI8 Support =&amp;gt; enabled
（略）
OCI8 Version =&amp;gt; 2.0.12
（略）
Oracle Run-time Client Library Version =&amp;gt; 12.1.0.2.0
Oracle Compile-time Instant Client Version =&amp;gt; 12.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出ていればOK&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;phpからの接続&#34;&gt;PHPからの接続&lt;/h2&gt;

&lt;p&gt;Macの場合の&lt;a href=&#34;../oracle-mac/&#34;&gt;PHPからの接続&lt;/a&gt;を参照&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP公式 &lt;a href=&#34;http://php.net/manual/ja/book.oci8.php&#34;&gt;Oracle OCI8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pecl公式 &lt;a href=&#34;https://pecl.php.net/package/oci8&#34;&gt;oci8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html&#34;&gt;Orcale Instant Client&lt;/a&gt;
(下の方にインストール方法)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;CentOS6.8&lt;/li&gt;
&lt;li&gt;PHP 5.6.27 + OCI8 2.0.12&lt;/li&gt;
&lt;li&gt;Oracle Instant Client 12.1.0.2.0&lt;/li&gt;
&lt;li&gt;DBサーバ OracleDB(Win)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CentOSからSQLServerへ接続</title>
      <link>https://mike-neko.github.io/blog/mssql-cent/</link>
      <pubDate>Thu, 03 Nov 2016 19:24:51 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/mssql-cent/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CentOSのPHP5.6から&lt;code&gt;PDO_ODBC&lt;/code&gt;でSQLServer(MSSQL)へ接続する方法&lt;/p&gt;

&lt;p&gt;Macの場合は&lt;a href=&#34;../mssql-mac/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なおCentOSからであれば&lt;code&gt;PDO_DBLIB&lt;/code&gt;+&lt;code&gt;FreeTDS&lt;/code&gt;も可能だが、公式ドライバがあるこちらを試してみた&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;sqlserverのドライバのインストール&#34;&gt;SQLServerのドライバのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;以下でインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;su
yum -y update
yum -y install yum-utils
yum-config-manager --add-repo https://apt-mo.trafficmanager.net/yumrepos/mssql-rhel6-release/
yum-config-manager --enable mssql-rhel6-release
wget &amp;quot;http://aka.ms/msodbcrhelpublickey/dpgswdist.v1.asc&amp;quot;
rpm --import dpgswdist.v1.asc
yum -y remove unixODBC
yum -y install msodbcsql # 途中にライセンスの承諾確認あり
yum -y install unixODBC-utf16-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ODBCドライバの確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/odbcinst.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、以下のような文言があればOK&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ODBC Driver 13 for SQL Server]
Description=Microsoft ODBC Driver 13 for SQL Server
Driver=/opt/microsoft/msodbcsql/lib64/libmsodbcsql-13.0.so.1.0
UsageCount=1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;odbcドライバの設定&#34;&gt;ODBCドライバの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/odbcinst.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、次のような設定を追記する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[(ドライバ名として判り易い名称)]
Driver = （odbcinst.iniの[]で囲まれたドライバ名）
Description = (適当な説明)
Trace = Yes
Server = (サーバのIP)
Port = (サーバのポート)
Database = (データベース名)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の例の場合だと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SQLServer]
Driver = ODBC Driver 13 for SQL Server
Description = For Develop
Trace = Yes
Server = 192.168.0.10
Port = 1433
Database = sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じになる&lt;/p&gt;

&lt;h3 id=&#34;pdo-odbcのインストール&#34;&gt;PDO_ODBCのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;以下でインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y install --enablerepo=remi --enablerepo=remi-php56 php-pdo php-odbc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php -i | grep odbc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して、&lt;code&gt;PDO drivers&lt;/code&gt;に&lt;code&gt;odbc&lt;/code&gt;が表示されていればOK&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;phpからの接続&#34;&gt;PHPからの接続&lt;/h2&gt;

&lt;p&gt;PDOのDSNの指定は以下の通り&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$driver = &#39;SQLServer&#39;;      // odbc.iniで設定したドライバ名
$user = &#39;test&#39;;             // ユーザ名
$pass = &#39;1234&#39;;             // パスワード

$pdo = new PDO(&#39;odbc:&#39; . $driver, $user, $pass); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP公式 &lt;a href=&#34;http://php.net/manual/ja/ref.pdo-odbc.php&#34;&gt;PDO_ODBC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft公式 &lt;a href=&#34;https://blogs.technet.microsoft.com/dataplatforminsider/2016/10/25/odbc-driver-13-0-for-sql-server-linux-is-now-released/&#34;&gt;ODBC Driver 13.0 for SQL Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;CentOS6.8&lt;/li&gt;
&lt;li&gt;PHP 5.6.27 + PDO_ODBC&lt;/li&gt;
&lt;li&gt;ODBC Driver 13.0 for SQL Server&lt;/li&gt;
&lt;li&gt;DBサーバ SQLServer Express 2016(Win)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MacからOracleへ接続</title>
      <link>https://mike-neko.github.io/blog/oracle-mac/</link>
      <pubDate>Thu, 03 Nov 2016 19:24:51 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/oracle-mac/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;MacのPHP5.6から別サーバで動いているOracleのDBへ&lt;code&gt;oci8&lt;/code&gt;で接続する方法&lt;/p&gt;

&lt;p&gt;CentOSの場合は&lt;a href=&#34;../oracle-cent/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;oracleのドライバのインストール&#34;&gt;Oracleのドライバのインストール&lt;/h3&gt;

&lt;p&gt;今回は&lt;code&gt;Version 12.1.0.2 (64-bit)&lt;/code&gt;は選択。手順などはこのバージョンが前提&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/database/features/instant-client/index.html&#34;&gt;Oracle Instant Client&lt;/a&gt;から&lt;code&gt;basic&lt;/code&gt;と&lt;code&gt;SDK&lt;/code&gt;をダウンロード&lt;br /&gt;
&lt;em&gt;公式の&lt;a href=&#34;http://php.net/manual/ja/oci8.requirements.php&#34;&gt;要件&lt;/a&gt;にあるように&lt;code&gt;OracleDB&lt;/code&gt;と&lt;code&gt;PHP&lt;/code&gt;のバージョンに合ったものを選択&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;1を全て同じフォルダへ解凍する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd （ダウンロード先）
unzip instantclient-basic-macos.x64-12.1.0.2.0.zip
unzip instantclient-sdk-macos.x64-12.1.0.2.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Ver.12であれば&lt;code&gt;instantclient_12_1&lt;/code&gt;というフォルダ内に全ファイルが解凍された状態になればOK)&lt;br /&gt;
&lt;strong&gt;フォルダ名がバージョンになっているので解凍したフォルダ名をそのまま使うこと！&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2をフォルダごと適当な場所に移動&lt;br /&gt;
（今回は&lt;code&gt;/Library/Oracle/&lt;/code&gt;へ移動）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ライブラリのシンボリックリンクを作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Library/Oracle/instantclient_12_1/
ln -s libclntsh.dylib.12.1 libclntsh.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;パスを通す&lt;br /&gt;
&lt;code&gt;.bash_profile&lt;/code&gt;に以下を追記&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DYLD_LIBRARY_PATH=/Library/Oracle/instantclient_12_1
export PATH=$PATH:$DYLD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追記したら保存し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で強制反映させる&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;oci8をインストール&#34;&gt;OCI8をインストール&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;以下はすでにPHPをインストール済かつ&lt;code&gt;PECL&lt;/code&gt;が使えない場合なので、
通常はPHPインストールと同時にしてしまうか&lt;code&gt;PECL&lt;/code&gt;で追加が恐らく楽&lt;/em&gt;&lt;br /&gt;
（手持ちの環境では&lt;code&gt;PECL&lt;/code&gt;がなぜか使えなかったので以下の手順）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;OCI8（Ver.2.0.12）を&lt;code&gt;PECL&lt;/code&gt;の&lt;a href=&#34;https://pecl.php.net/package/oci8&#34;&gt;該当ページ&lt;/a&gt;からダウンロード&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解凍する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd （ダウンロード先）
tar -zxf oci8-2.0.12.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;makeする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd oci8-2.0.12
phpize
./configure -with-oci8=shared,instantclient,/Library/Oracle/instantclient_12_1
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;modules&lt;/code&gt;の中に&lt;code&gt;oci8.so&lt;/code&gt;ができていればOK&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ライブラリを移動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv modules/oci8.so /Library/Oracle 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（とりあえず今回はここで）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PHPの設定
&lt;code&gt;php.ini&lt;/code&gt;に以下の2つの項目を設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension_dir = &amp;quot;/Library/Oracle&amp;quot; # oci8.soを置いた場所
extension=oci8.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（ファイルの場所が判らない時は&lt;code&gt;php -i | grep php.ini&lt;/code&gt;）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php --ri oci8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;（略）
OCI8 Support =&amp;gt; enabled
（略）
OCI8 Version =&amp;gt; 2.0.12
（略）
Oracle Run-time Client Library Version =&amp;gt; 12.1.0.2.0
Oracle Compile-time Instant Client Version =&amp;gt; 12.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出ていればOK&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;phpからの接続&#34;&gt;PHPからの接続&lt;/h2&gt;

&lt;p&gt;フレームワークなどを使わずにそのまま接続する場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$user = &#39;test&#39;;             // ユーザ名
$pass = &#39;1234&#39;;             // パスワード
$host = &#39;192.168.0.10&#39;;     // ホスト
$port = &#39;1521&#39;;             // ポート番号
$db = &#39;sample&#39;;             // データベース名（サービス名）

$conn = oci_connect(
  $user,
  $pass,
  &#39;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)&#39;
  . &#39;(HOST=&#39; . $host . &#39;)(PORT=&#39; . $port . &#39;)))&#39; 
  . &#39;(CONNECT_DATA=(SERVICE_NAME=&#39; . $db . &#39;)))&#39;]
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じで接続できる&lt;/p&gt;

&lt;h2 id=&#34;phpstormの設定&#34;&gt;PHPStormの設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;PHPStorm&lt;/code&gt;から接続したい場合は、&lt;code&gt;Oracle Instant Client&lt;/code&gt;はVer.12以上が必要&lt;/p&gt;

&lt;p&gt;設定は以下の感じ&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&#34;https://mike-neko.github.io/media/2016-11-03-oracle-mac/phpstorm.png&#34; /&gt;
&lt;/figure&gt;


&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP公式 &lt;a href=&#34;http://php.net/manual/ja/book.oci8.php&#34;&gt;Oracle OCI8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html&#34;&gt;Orcale Instant Client&lt;/a&gt;
(下の方にインストール方法)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Mac 10.11&lt;/li&gt;
&lt;li&gt;PHP 5.6.27 + OCI8 2.0.12&lt;/li&gt;
&lt;li&gt;Oracle Instant Client 12.1.0.2.0&lt;/li&gt;
&lt;li&gt;DBサーバ OracleDB(Win)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MacからSQLServerへ接続</title>
      <link>https://mike-neko.github.io/blog/mssql-mac/</link>
      <pubDate>Thu, 03 Nov 2016 19:24:51 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/mssql-mac/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;MacのPHP5.6からSQLServer(MSSQL)へ接続する方法&lt;/p&gt;

&lt;p&gt;CentOSの場合は&lt;a href=&#34;../mssql-cent/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;子ネタ&#34;&gt;子ネタ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SQLServer&lt;/code&gt;へPHPから接続するには以下の方法がある&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/ja/ref.pdo-sqlsrv.php&#34;&gt;PDO_SQLSR&lt;/a&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows版のPHPでしか使えない&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/ja/ref.pdo-dblib.php&#34;&gt;PDO_DBLIB&lt;/a&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FreeTDS&lt;/code&gt;ライブラリを利用する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows版はPHP5.3以降使えない&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/ja/ref.pdo-odbc.php&#34;&gt;PDO_ODBC&lt;/a&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Microsoftのドライバが必要(Win or Linuxのみ) =&amp;gt; &lt;strong&gt;Macは使えない&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という訳で、Macからの場合は&lt;code&gt;PDO_DBLIB&lt;/code&gt;+&lt;code&gt;FreeTDS&lt;/code&gt;一択、
Linuxの場合は&lt;code&gt;PDO_ODBC&lt;/code&gt;+公式ドライバ（おすすめ？） or &lt;code&gt;PDO_DBLIB&lt;/code&gt;+&lt;code&gt;FreeTDS&lt;/code&gt;となる&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;freetdsのインストール&#34;&gt;FreeTDSのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Homebrew&lt;/code&gt;で&lt;code&gt;FreeTDS&lt;/code&gt;をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install freetds
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;FreeTDS&lt;/code&gt;の接続確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tsql -H (SQLServerのアドレス) -p (ポート) -U (ユーザ名) -P (パスワード)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locale is &amp;quot;ja_JP.UTF-8&amp;quot;
locale charset is &amp;quot;UTF-8&amp;quot;
using default charset &amp;quot;UTF-8&amp;quot;
1&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようになれば&lt;code&gt;exit&lt;/code&gt;で終了&lt;br /&gt;
&lt;code&gt;1&amp;gt;&lt;/code&gt;の部分の数字が変わっていく場合は接続がうまくいっていない&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;試した開発環境ではかなりの頻度でタイムアウトのエラーが出ていたので何度か試してみること&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;pdo-dblibのインストール&#34;&gt;PDO_DBLIBのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Homebrew&lt;/code&gt;で&lt;code&gt;PDO_DBLIB&lt;/code&gt;をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install homebrew/php/php56-pdo-dblib
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php --ri pdo_dblib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PDO Driver for FreeTDS/Sybase DB-lib =&amp;gt; enabled
Flavour =&amp;gt; freetds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出ていればOK&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;phpからの接続&#34;&gt;PHPからの接続&lt;/h2&gt;

&lt;p&gt;PDOのDSNの指定は以下の通り&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$user = &#39;test&#39;;             // ユーザ名
$pass = &#39;1234&#39;;             // パスワード
$host = &#39;192.168.0.10&#39;;     // ホスト
$port = &#39;1433&#39;;             // ポート番号
$db = &#39;sample&#39;;             // データベース名

$pdo = new PDO(&#39;dblib:host=&#39; . $host . &#39;:&#39; . $port . &#39;;dbname=&#39; $db, 
               $user, $pass); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;phpstormの設定&#34;&gt;PHPStormの設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;PHPStorm&lt;/code&gt;から接続したい場合の設定は以下の感じ&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&#34;https://mike-neko.github.io/media/2016-11-03-mssql-mac/phpstorm.png&#34; /&gt;
&lt;/figure&gt;


&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP公式 &lt;a href=&#34;http://php.net/manual/ja/ref.pdo-dblib.php&#34;&gt;PDO_DBLIB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FreeTDS &lt;a href=&#34;http://www.freetds.org/&#34;&gt;公式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Mac 10.11&lt;/li&gt;
&lt;li&gt;PHP 5.6.27 + PDO_DBLIB&lt;/li&gt;
&lt;li&gt;FreeTDS 1.00.15 (TDS 7.3)&lt;/li&gt;
&lt;li&gt;DBサーバ SQLServer Express 2016(Win)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Guzzle(PHP)でAPNsの同時配信を行う</title>
      <link>https://mike-neko.github.io/blog/guzzle-apns/</link>
      <pubDate>Sat, 29 Oct 2016 22:40:57 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/guzzle-apns/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Guzzle&lt;/code&gt;でiOSのAPNs(Push通知)をお手軽に同時配信する方法&lt;/p&gt;

&lt;p&gt;APNs自体については&lt;a href=&#34;../http2apns/&#34;&gt;APNs Provider API(http2)を利用する(Node.js)&lt;/a&gt;を参照&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Guzzle&lt;/code&gt;自体は&lt;a href=&#34;../guzzle/&#34;&gt;以前の記事&lt;/a&gt;を参照&lt;/p&gt;

&lt;h3 id=&#34;curlの更新&#34;&gt;curlの更新&lt;/h3&gt;

&lt;p&gt;APNsを使うには&lt;code&gt;http2&lt;/code&gt;が必要かつ非同期で実行したいので、&lt;code&gt;curl&lt;/code&gt;をインストールし直す&lt;/p&gt;

&lt;p&gt;&lt;code&gt;homebrew&lt;/code&gt;を使っている場合は以下の感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install curl --with-nghttp2 --with-openssl
brew link curl --force
brew reinstall php56 --with-homebrew-curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、自分で試した時は上記だけでは&lt;code&gt;http2&lt;/code&gt;が有効にならなかったので、
アンイストールした方が確実かもしれない&lt;/p&gt;

&lt;p&gt;更新後に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として&lt;code&gt;http2&lt;/code&gt;が出ていればOK&lt;/p&gt;

&lt;h2 id=&#34;guzzleの使い方&#34;&gt;Guzzleの使い方&lt;/h2&gt;

&lt;h3 id=&#34;http2で通信する&#34;&gt;http2で通信する&lt;/h3&gt;

&lt;p&gt;オプションで指定するだけでOK&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$client = new Client([&#39;version&#39; =&amp;gt; 2.0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;post送信&#34;&gt;POST送信&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;body&lt;/code&gt;はリクエスト時のオプションとして以下の感じで指定する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$client = new Client();
$response = $client-&amp;gt;request(&#39;POST&#39;, $url, [&#39;body&#39; =&amp;gt; $body]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;body&lt;/code&gt;の中身を&lt;code&gt;JSON&lt;/code&gt;にしたい時は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&#39;body&#39; =&amp;gt; json_encode($json])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形にして渡す&lt;/p&gt;

&lt;h3 id=&#34;クライアント証明書をつける&#34;&gt;クライアント証明書をつける&lt;/h3&gt;

&lt;p&gt;これもオプションで指定するだけでOK&lt;/p&gt;

&lt;p&gt;例えば同じ階層内に&lt;code&gt;apns_dev.pem&lt;/code&gt;という証明書（パスフレーズ&lt;code&gt;0000&lt;/code&gt;）に置いた場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$client = new Client([&#39;cert&#39; =&amp;gt; [&#39;apns_dev.pem&#39;, &#39;0000&#39;]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あえていうなら、&lt;code&gt;pem&lt;/code&gt;形式の証明書を作るのがちょっと面倒&lt;/p&gt;

&lt;h2 id=&#34;apnsの同時配信&#34;&gt;APNsの同時配信&lt;/h2&gt;

&lt;p&gt;APNsは通知内容をJSONで指定することと、前回の並列リクエストを併せると、以下のコードで同時配信が実現できる&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/dcc15bedbc4d42e4e8b1c31119f3c63a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;（※配信環境はSandBox向け）&lt;/p&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP 5.6&lt;/li&gt;
&lt;li&gt;Guzzle 6.2.2&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Guzzleで非同期の並列リクエストを行う</title>
      <link>https://mike-neko.github.io/blog/guzzle/</link>
      <pubDate>Sat, 29 Oct 2016 16:50:33 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/guzzle/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;PHP&lt;/code&gt;のHTTPクライアント(&lt;a href=&#34;http://docs.guzzlephp.org/en/latest/&#34;&gt;Guzzle&lt;/a&gt;)で非同期の並列リクエストを行う方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Guzzle&lt;/code&gt;は内部では&lt;code&gt;curl&lt;/code&gt;を使っており、便利な&lt;code&gt;curl&lt;/code&gt;を面倒な設定をせずに使えるというありがたいもの
（なお&lt;code&gt;curl&lt;/code&gt;がなくても動くがその場合は非同期が使えないなど機能が制限されるらしい）&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;動作環境は以下のとおり&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP 5.5.0以上&lt;/li&gt;
&lt;li&gt;curl 7.19.4以上
(要openSSL/zlib)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;composer&lt;/code&gt;で&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt;を入れる&lt;br /&gt;
(&lt;code&gt;guzzle/guzzle&lt;/code&gt;は古いバージョンなので注意)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;composer&lt;/code&gt;を使っているので、使う時は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;vendor/autoload.php&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を忘れないこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;php-iniの設定&#34;&gt;php.iniの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;allow_url_fopen = ON
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を設定しておく&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;複数のURLに並列に非同期にリクエストをかける方法は以下のとおり&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/07e16ffece9ecfbffa4959f875897418.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;まずは、&lt;code&gt;$requests&lt;/code&gt;に実際のリクエストを生成する処理をクロージャとして登録する。&lt;br /&gt;
今回であれば、URLのリストから単純にURLを取り出し、&lt;code&gt;$client-&amp;gt;getAsync($url)&lt;/code&gt;としてリクエストを生成している&lt;br /&gt;
（URLのエンドポイントだけが違うような場合は&lt;code&gt;base_uri&lt;/code&gt;を指定した方がスマート）&lt;/p&gt;

&lt;p&gt;ポイントは&lt;code&gt;yield&lt;/code&gt;でジェネレータを使っていること。&lt;br /&gt;
通常は&lt;code&gt;foreach&lt;/code&gt;をした時点でそのループの回数分中の処理が実行されてメモリなどのリソースを消費するが、
ジェネレータを使うと実際に必要になる（今回であれば&lt;code&gt;Pool&lt;/code&gt;で順次実行される時）まで実行されずリソースを消費しないメリットがある&lt;/p&gt;

&lt;p&gt;リクエストの生成処理ができれば、&lt;code&gt;Pool&lt;/code&gt;オブジェクトに渡して&lt;code&gt;Promise&lt;/code&gt;を生成する。
その際、&lt;code&gt;concurrency&lt;/code&gt;で同時リクエスト数を、&lt;code&gt;fulfilled&lt;/code&gt;で成功時の処理、&lt;code&gt;rejected&lt;/code&gt;で失敗時の処理が行われる。
非同期の場合、リクエストは生成順に実行されるが、当然、処理結果は順不同で返ってくる。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;Promise&lt;/code&gt;の&lt;code&gt;wait()&lt;/code&gt;の部分で全ての並列処理が終わるまで待機される。
これを忘れると完了しないまま処理が終わってしまう&lt;/p&gt;

&lt;p&gt;つまり、例えばあるページにアクセスした時にバックグラウンドの非同期でダウンロードを行うといったことはできない。
そういったことをしたい場合は、&lt;code&gt;Laravel&lt;/code&gt;の&lt;a href=&#34;https://readouble.com/laravel/5.1/ja/queues.html&#34;&gt;キュー&lt;/a&gt;なんかがおすすめ&lt;/p&gt;

&lt;h2 id=&#34;小ネタ&#34;&gt;小ネタ&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$client = new Client([&#39;debug&#39; =&amp;gt; true]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくと細かな通信状況が出力されるので便利&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;公式：&lt;a href=&#34;http://docs.guzzlephp.org/en/latest/&#34;&gt;Guzzle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ジェネレータ:&lt;a href=&#34;http://php.net/manual/ja/language.generators.overview.php&#34;&gt;PHP公式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PHP 5.6&lt;/li&gt;
&lt;li&gt;Guzzle 6.2.2&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>さくらのレンタルサーバでredisを使う</title>
      <link>https://mike-neko.github.io/blog/redis-sakura/</link>
      <pubDate>Sat, 15 Oct 2016 21:53:49 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/redis-sakura/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;さくらのレンタルサーバ（スタンダード）に&lt;a href=&#34;http://redis.io/&#34;&gt;redis&lt;/a&gt;をインストールする方法のメモ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;のキューを使うついでに、せっかくなので&lt;code&gt;redis&lt;/code&gt;を使えるようにしてみる。
&lt;code&gt;Laravel&lt;/code&gt;をさくらで使うあたりは&lt;a href=&#34;../laravel-sakura/&#34;&gt;以前の記事&lt;/a&gt;を参照&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;h3 id=&#34;ソースを展開&#34;&gt;ソースを展開&lt;/h3&gt;

&lt;p&gt;SSHでログインして公式の手順通り以下の様にする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% wget http://download.redis.io/releases/redis-3.2.0.tar.gz
% tar xzf redis-3.2.0.tar.gz
% cd redis-3.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最新版(Ver.3.2.4)では、権限絡みで&lt;code&gt;make&lt;/code&gt;に失敗する為、少し古いバージョンを使っているのがポイント&lt;/p&gt;

&lt;h3 id=&#34;インストール先の変更&#34;&gt;インストール先の変更&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;src/Makefile&lt;/code&gt;を開く
（&lt;code&gt;redis-3.2.0&lt;/code&gt;直下にも&lt;code&gt;Makefile&lt;/code&gt;があるので間違わないこと）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PREFIX?=&lt;/code&gt;という行を以下の様に書き換えて保存する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX?=/home/アカウント名
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;make&#34;&gt;make&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;% gmake
% gmake install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さくらのサーバはBSD系なので&lt;code&gt;gmake&lt;/code&gt;を使ってインストールを実行。
これで、&lt;code&gt;~/bin&lt;/code&gt;に&lt;code&gt;redis&lt;/code&gt;関連がインストールされる&lt;/p&gt;

&lt;p&gt;もし、&lt;code&gt;~/bin&lt;/code&gt;にパスが通っていなければ通しておくと便利&lt;/p&gt;

&lt;h3 id=&#34;実行&#34;&gt;実行&lt;/h3&gt;

&lt;p&gt;一旦、SSHをログアウトしてログインしなおしてから&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% nohup redis-server &amp;lt; /dev/null &amp;gt;&amp;amp; /dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、&lt;code&gt;redis&lt;/code&gt;サーバをバックグラウンド起動する&lt;/p&gt;

&lt;p&gt;確認のため、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% redis-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というようになればOK。失敗している時は&lt;code&gt;not connected&amp;gt;&lt;/code&gt;となる&lt;/p&gt;

&lt;p&gt;&lt;em&gt;この時に表示されているサーバのIPとポート番号を覚えておくこと&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;確認が終了すれば、&lt;code&gt;exit&lt;/code&gt;で抜ける（&lt;code&gt;shatdown&lt;/code&gt;にするとサーバまで止まるのでNG）&lt;/p&gt;

&lt;h2 id=&#34;laravelで使う&#34;&gt;Laravelで使う&lt;/h2&gt;

&lt;h3 id=&#34;パッケージの準備&#34;&gt;パッケージの準備&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;で&lt;code&gt;redis&lt;/code&gt;を使うには&lt;code&gt;predis/predis&lt;/code&gt;が必要なので、&lt;code&gt;Composer&lt;/code&gt;でインストールしておく&lt;/p&gt;

&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;config/database.php&lt;/code&gt;の中の&lt;code&gt;redis&lt;/code&gt;を設定する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;redis&#39; =&amp;gt; [

  &#39;cluster&#39; =&amp;gt; false,

  &#39;default&#39; =&amp;gt; [
    &#39;host&#39;     =&amp;gt; &#39;127.0.0.1&#39;,      // redis-cliで確認したIP
    &#39;port&#39;     =&amp;gt; 6379,             // redis-cliで確認したポート
    &#39;database&#39; =&amp;gt; 0,
  ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;なお&lt;code&gt;.env&lt;/code&gt;を使う場合、&lt;code&gt;database&lt;/code&gt;の部分は&lt;code&gt;intval(env(&#39;REDIS_DATABASE&#39;, 0))&lt;/code&gt;というように明示的にintにしないとエラーになるので注意&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上で、&lt;code&gt;Laravel&lt;/code&gt;からも&lt;code&gt;redis&lt;/code&gt;が使える様になる&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Laravel 5.1&lt;/li&gt;
&lt;li&gt;さくらのレンタルサーバ（スタンダード）

&lt;ul&gt;
&lt;li&gt;PHP 5.6&lt;/li&gt;
&lt;li&gt;redis 3.2.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>さくらのレンタルサーバでeasy_installを使う</title>
      <link>https://mike-neko.github.io/blog/easyinstall-sakura/</link>
      <pubDate>Sat, 15 Oct 2016 02:03:14 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/easyinstall-sakura/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;さくらのレンタルサーバ（スタンダード）でいつのまにか
&lt;a href=&#34;http://setuptools.readthedocs.io/en/latest/easy_install.html&#34;&gt;easy_install&lt;/a&gt;
が使えるようになっていたので使い方のメモ&lt;/p&gt;

&lt;p&gt;レンタルサーバなので、当然そのまま実行すると&lt;code&gt;[Errno 13] Permission denied&lt;/code&gt;で怒られるのでその対策&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;インストール先の変更&#34;&gt;インストール先の変更&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;(無ければ)&lt;code&gt;~/.pydistutils.cfg&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;ファイルの中に以下を追記&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;[install]
user=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;パスの追加&#34;&gt;パスの追加&lt;/h3&gt;

&lt;p&gt;ついでにパスを通しておく。
&lt;code&gt;csh&lt;/code&gt;の場合は、&lt;code&gt;~/.cshrc&lt;/code&gt;の中の&lt;code&gt;set path&lt;/code&gt;の行に&lt;code&gt;$HOME/.local/bin&lt;/code&gt;を追加する&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;インストール時はそのまま実行すればOK。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% easy_install pip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば、&lt;code&gt;~/.local/bin&lt;/code&gt;に&lt;code&gt;pip&lt;/code&gt;がインストールされる。&lt;/p&gt;

&lt;p&gt;実行したい時は、パスが通っているので&lt;code&gt;pip&lt;/code&gt;とだけで実行できる。&lt;/p&gt;

&lt;p&gt;なお、インストールしたのに、&lt;code&gt;Command not found.&lt;/code&gt;と出る場合は、
SSHにログインしなおすと良い&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PhpStormからさくらのレンタルサーバを使う</title>
      <link>https://mike-neko.github.io/blog/phpstorm-sakura/</link>
      <pubDate>Mon, 10 Oct 2016 02:03:14 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/phpstorm-sakura/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;さくらのレンタルサーバ（スタンダード）をPhpStormから使うにあたっての便利な小ネタ&lt;/p&gt;

&lt;h2 id=&#34;さくらのdbに接続する&#34;&gt;さくらのDBに接続する&lt;/h2&gt;

&lt;h3 id=&#34;設定情報&#34;&gt;設定情報&lt;/h3&gt;

&lt;p&gt;接続したいさくらのDBは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DBサーバ:mysql***.db.sakura.ne.jp&lt;/li&gt;
&lt;li&gt;データベース名:アカウント名_testdb&lt;/li&gt;
&lt;li&gt;ユーザ名:アカウント名&lt;/li&gt;
&lt;li&gt;パスワード:pass&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とし、事前に作成済みとする。&lt;/p&gt;

&lt;h3 id=&#34;phpstormでの設定&#34;&gt;PhpStormでの設定&lt;/h3&gt;

&lt;p&gt;1. &lt;code&gt;PhpStorm&lt;/code&gt;で適当なプロジェクトを作って起動&lt;br /&gt;
2. メニューの&lt;code&gt;View&lt;/code&gt; - &lt;code&gt;Tool Windows&lt;/code&gt; - &lt;code&gt;Database&lt;/code&gt;を選択&lt;br /&gt;
3. ツールウィンドウの左上の&lt;code&gt;+&lt;/code&gt; - &lt;code&gt;Data Source&lt;/code&gt; - &lt;code&gt;MySQL&lt;/code&gt;を選択&lt;br /&gt;
4. &lt;code&gt;SSH/SSL&lt;/code&gt;のタブを選択&lt;br /&gt;
5. &lt;code&gt;Use SSH tunnel&lt;/code&gt;にチェック&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Proxy host&lt;/td&gt;
&lt;td&gt;アカウント名.sakura.ne.jp&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Proxy user&lt;/td&gt;
&lt;td&gt;アカウント名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Auth type&lt;/td&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Proxy password&lt;/td&gt;
&lt;td&gt;サーバのパスワード&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;6. &lt;code&gt;Test Connection&lt;/code&gt;を押して&lt;code&gt;Error&lt;/code&gt;と出なければ接続OK&lt;br /&gt;
7. &lt;code&gt;General&lt;/code&gt;のタブを選択&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;mysql***.db.sakura.ne.jp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;3306&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;アカウント名_testdb&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;アカウント名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;td&gt;pass&lt;/td&gt;
&lt;td&gt;DBのパスワード&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;8. &lt;code&gt;Test Connection&lt;/code&gt;を押して&lt;code&gt;Successful&lt;/code&gt;と出れば接続OK&lt;br /&gt;
9. &lt;code&gt;Options&lt;/code&gt;タブを選択&lt;br /&gt;
10. &lt;code&gt;Resolve ...&lt;/code&gt;の欄でDB名にチェックを入れる&lt;br /&gt;
11. &lt;code&gt;OK&lt;/code&gt;で閉じるとツールウィンドウ内にDBが表示される&lt;/p&gt;

&lt;h2 id=&#34;サーバの中を見る-ftp&#34;&gt;サーバの中を見る（FTP）&lt;/h2&gt;

&lt;p&gt;PhpStorm内蔵のFTPの設定方法。
ファイルのアップロードには制約があるが、代わりにローカルファイルとの差分を表示や同期ができるなど結構便利。&lt;/p&gt;

&lt;p&gt;1. &lt;code&gt;PhpStorm&lt;/code&gt;で適当なプロジェクトを作って起動&lt;br /&gt;
2. メニューの&lt;code&gt;View&lt;/code&gt; - &lt;code&gt;Tool Windows&lt;/code&gt; - &lt;code&gt;Remote Host&lt;/code&gt;を選択&lt;br /&gt;
3. ツールウィンドウの&lt;code&gt;...&lt;/code&gt;を選択&lt;br /&gt;
4. &lt;code&gt;Name&lt;/code&gt;に適当な名前をつける&lt;br /&gt;
5. &lt;code&gt;Type&lt;/code&gt;で&lt;code&gt;SFTP&lt;/code&gt;を選択&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SFTP host&lt;/td&gt;
&lt;td&gt;アカウント名.sakura.ne.jp&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Root path&lt;/td&gt;
&lt;td&gt;/home/アカウント名/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;User name&lt;/td&gt;
&lt;td&gt;アカウント名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Auth type&lt;/td&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;td&gt;サーバのパスワード&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;6. &lt;code&gt;Test SFTP connection&lt;/code&gt;を押して&lt;code&gt;Successful&lt;/code&gt;と出れば接続OK&lt;/p&gt;

&lt;p&gt;ここまで設定すればサーバ内のファイルの閲覧や削除などが行える。
さらに、アップロードやローカルファイルとの比較などがしたい場合は、ローカルとの紐付けが必要。&lt;/p&gt;

&lt;p&gt;7. &lt;code&gt;Mappings&lt;/code&gt;のタブを選択&lt;br /&gt;
8. &lt;code&gt;Loacal path&lt;/code&gt;に既存プロジェクトのパスが入っていることを確認&lt;br /&gt;
9. &lt;code&gt;Deployment path on server 〜&lt;/code&gt;に対応するサーバのパスを選択&lt;/p&gt;

&lt;p&gt;これでツールウィンドウの中にサーバ上のファイルが表示され、右クリックでいろいろできるようになる。&lt;/p&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PhpStorm 2016.2&lt;/li&gt;
&lt;li&gt;さくらのレンタルサーバ（スタンダード）

&lt;ul&gt;
&lt;li&gt;MySQL 5.5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Laravelをさくらのレンタルサーバへデプロイ</title>
      <link>https://mike-neko.github.io/blog/laravel-sakura/</link>
      <pubDate>Thu, 06 Oct 2016 00:27:56 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/laravel-sakura/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;ローカルで開発した&lt;code&gt;Laravel5&lt;/code&gt;のプロジェクトをさくらのレンタルサーバ（スタンダード）で公開する時のメモ&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;macOS 10.12.0&lt;/li&gt;
&lt;li&gt;Laravel 5.1&lt;/li&gt;
&lt;li&gt;さくらのレンタルサーバ（スタンダード）

&lt;ul&gt;
&lt;li&gt;PHP 5.6&lt;/li&gt;
&lt;li&gt;MySQL 5.5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにローカルでは&lt;code&gt;PhpStorm&lt;/code&gt;で開発している&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;www.アカウント名.sakura.ne.jp/hoge&lt;/code&gt;とアクセスすると表示させる前提の手順&lt;br /&gt;
（アカウント名は○○○○.sakura.ne.jpの○○○○部分）&lt;/p&gt;

&lt;p&gt;流れとしては、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gitの&lt;code&gt;export&lt;/code&gt;でアップするファイルを準備&lt;/li&gt;
&lt;li&gt;FTPで1をアップロード&lt;/li&gt;
&lt;li&gt;&lt;code&gt;composer&lt;/code&gt;をインストール&lt;/li&gt;
&lt;li&gt;プロジェクトの設定&lt;/li&gt;
&lt;li&gt;公開&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回はGitのリモートサーバは外部に公開していない為、1〜2の手順が必要。
GitHubとかで管理しているならcloneしてくればOK&lt;/p&gt;

&lt;h3 id=&#34;ファイルの準備&#34;&gt;ファイルの準備&lt;/h3&gt;

&lt;h4 id=&#34;任意-除外ファイルの設定&#34;&gt;（任意）除外ファイルの設定&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;※普段はGit管理しているがサーバへアップしたくないファイルがある場合のみ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;今回は&lt;code&gt;PhpStorm&lt;/code&gt;のプロジェクトファイルをアップロード対象外としたい
=エクスポートさせたくないので、&lt;code&gt;.gitattributes&lt;/code&gt;に設定を追加する&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;プロジェクトのルートフォルダの&lt;code&gt;.gitattributes&lt;/code&gt;を開く&lt;br /&gt;
（無い場合は作成）&lt;/li&gt;
&lt;li&gt;除外対象を&lt;code&gt;.idea/ export-ignore&lt;/code&gt;として追記する&lt;br /&gt;
（.ideaフォルダ以下をエクスポート時に除外する設定）&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;エクスポート&#34;&gt;エクスポート&lt;/h4&gt;

&lt;p&gt;ターミナルでエクスポートする。エクスポート先はプロジェクトのフォルダと同じ階層にしている&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd （プロジェクトのルート）
mkdir ../export
git archive master --worktree-attributes | tar -x -C ../export
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（回線によってはここで圧縮しておき、サーバ上で展開した方が良いかも）&lt;/p&gt;

&lt;h3 id=&#34;サーバへアップロード&#34;&gt;サーバへアップロード&lt;/h3&gt;

&lt;p&gt;FTPソフトで一つ前の手順でエクスポートしたフォルダの中身を丸ごとアップロードする&lt;br /&gt;
アップロード先は&lt;code&gt;/home/アカウント名/laravel&lt;/code&gt;とする&lt;br /&gt;
&lt;em&gt;&lt;code&gt;www&lt;/code&gt;以下にはアップロードしないこと！&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;composerをインストール&#34;&gt;composerをインストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSHでログインする&lt;br /&gt;
ターミナルで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh アカウント名@アカウント名.sakura.ne.jp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;鍵認証をしていなければ、パスワードを聞かれるので入力する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;bin&lt;/code&gt;ディレクトリを作成し、そこへ&lt;code&gt;composer&lt;/code&gt;をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% mkdir bin
% curl -sS https://getcomposer.org/installer | php -- --install-dir=bin --filename=composer
% chmod 755 bin/composer
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一旦ログアウトしてログインする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% exit
ssh アカウント名@アカウント名.sakura.ne.jp
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;プロジェクトにパッケージをインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd laravel
% composer install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;プロジェクトの設定&#34;&gt;プロジェクトの設定&lt;/h3&gt;

&lt;h4 id=&#34;dbの準備&#34;&gt;DBの準備&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;サーバのコントロールパネルへログイン&lt;/li&gt;
&lt;li&gt;&lt;code&gt;データベースの設定&lt;/code&gt;を開き、DBサーバとユーザ名を確認&lt;/li&gt;
&lt;li&gt;&lt;code&gt;データベースの新規作成&lt;/code&gt;からプロジェクト用のデータベースを作成&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;laravelへ設定&#34;&gt;Laravelへ設定&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.env&lt;/code&gt;ファイルを設定する&lt;br /&gt;
&lt;code&gt;DB_〜&lt;/code&gt;の各項目はコントロールパネルで確認・設定したものを記述しておく&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/7ae29213feac486174f86ebe8e8c534c.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.env&lt;/code&gt;ファイルの&lt;code&gt;APP_KEY&lt;/code&gt;を生成&lt;br /&gt;
（ターミナルの状態は前回の続き）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% php artisan key:generate  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBのマイグレーションを実施&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% php artisan migrate  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;公開&#34;&gt;公開&lt;/h3&gt;

&lt;h4 id=&#34;公開用フォルダの設定&#34;&gt;公開用フォルダの設定&lt;/h4&gt;

&lt;p&gt;さくらのレンタルサーバは&lt;code&gt;DocumentRoot&lt;/code&gt;を変更できないので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ln -s ~/laravel/public ~/www/hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として&lt;code&gt;Laravel&lt;/code&gt;の&lt;code&gt;public&lt;/code&gt;へのシンボリックリンクを&lt;code&gt;www&lt;/code&gt;の中へ置く&lt;/p&gt;

&lt;p&gt;これで&lt;code&gt;www.アカウント名.sakura.ne.jp/hoge&lt;/code&gt;へのアクセスで、
プロジェクトの公開用フォルダ&lt;code&gt;public&lt;/code&gt;へアクセスできるようになる。&lt;br /&gt;
（ただしまだこの段階ではエラー）&lt;/p&gt;

&lt;h4 id=&#34;htaccessの編集&#34;&gt;.htaccessの編集&lt;/h4&gt;

&lt;p&gt;さくらのレンタルサーバは&lt;code&gt;.htaccess&lt;/code&gt;で&lt;code&gt;Options&lt;/code&gt;を使えないので、
&lt;code&gt;laravel/public&lt;/code&gt;の中の&lt;code&gt;.htaccess&lt;/code&gt;を開き、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mod_negotiation.c&amp;gt;
  Options -MultiViews
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を削除する。&lt;br /&gt;
これで無事公開が完了！&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;サーバ上のファイル構成は以下の感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/アカウント名
  ├─ laravel
  |    ├─ .env
  |    ├─ public
  |    |  ├─ .htaccess
  |    |  └─ ...
  |    └─ ...
  ├─ www
  |    ├─ hoge          # シンボリックリンク
  |    └─ ...
  └─ ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c-rtx.com/2015/09/22/laravel-on-sakura-rental-server/&#34;&gt;Laravel5をさくらのレンタルサーバで動かす&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker(Kitematic)&#43;PHPStormでMySQL環境をお手軽構築</title>
      <link>https://mike-neko.github.io/blog/docker-db/</link>
      <pubDate>Thu, 29 Sep 2016 01:44:58 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/docker-db/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;個人的には&lt;code&gt;MariaDB&lt;/code&gt;を使っているが、レンタルサーバや既存開発のものだと
まだまだ&lt;code&gt;MySQL&lt;/code&gt;の環境が必要なこともしばしば。。。&lt;/p&gt;

&lt;p&gt;かといって、そんなに使わない環境をわざわざローカルに構築するのも面倒なので、
さっくりとお手軽に速攻で構築してしまおうという時のメモ。&lt;/p&gt;

&lt;p&gt;ちなみに、お手軽なのでターミナルでコマンドを叩くことすらしない。&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;/code&gt;と&lt;code&gt;Kitematic&lt;/code&gt;をインストールしておく&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PhpStorm&lt;/code&gt;をインストールしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;../docker/&#34;&gt;Docker構築メモ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;※&lt;code&gt;PhpStorm&lt;/code&gt;は接続確認や&lt;code&gt;phpMyAdmin&lt;/code&gt;の代わりに使うので、なくてもDB構築には支障ない&lt;/p&gt;

&lt;h3 id=&#34;mysqlの構築&#34;&gt;MySQLの構築&lt;/h3&gt;

&lt;h4 id=&#34;コンテナの生成&#34;&gt;コンテナの生成&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kitematic&lt;/code&gt;を起動する&lt;/li&gt;
&lt;li&gt;検索窓(&lt;code&gt;Serach for Docker ...&lt;/code&gt;とあるところ)にmysqlで検索し、
作者が&lt;code&gt;official&lt;/code&gt;になっている&lt;code&gt;mysql&lt;/code&gt;のイメージを見つける&lt;/li&gt;
&lt;li&gt;&lt;em&gt;（バージョンを指定したい時のみ）&lt;/em&gt;&lt;br /&gt;
CREATEボタンの左にある&lt;code&gt;・・・&lt;/code&gt; - &lt;code&gt;SELECTED TAG&lt;/code&gt;から任意のバージョンを選択&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CREATE&lt;/code&gt;を実行してしばらく待つとコンテナが生成される&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※この段階ではパスワードなど必要な設定がまだの為、エラーで起動しない&lt;/p&gt;

&lt;h4 id=&#34;mysqlの設定&#34;&gt;MySQLの設定&lt;/h4&gt;

&lt;p&gt;DBの設定は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rootパスワード:&lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;データベース名:testdb&lt;/li&gt;
&lt;li&gt;ユーザ名:user&lt;/li&gt;
&lt;li&gt;パスワード:pass&lt;/li&gt;
&lt;li&gt;ポート:32768&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という前提のため適宜読み替えること&lt;/p&gt;

&lt;p&gt;1. &lt;code&gt;Settings&lt;/code&gt;のタブを選択&lt;br /&gt;
2. &lt;code&gt;Environment Variables&lt;/code&gt;に以下のように設定値を追加&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KEY&lt;/th&gt;
&lt;th&gt;VALUE&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MYSQL_ROOT_PASSWORD&lt;/td&gt;
&lt;td&gt;root&lt;/td&gt;
&lt;td&gt;rootパスワード&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MYSQL_DATABASE&lt;/td&gt;
&lt;td&gt;testdb&lt;/td&gt;
&lt;td&gt;データベース名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MYSQL_USER&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;ユーザ名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MYSQL_PASSWORD&lt;/td&gt;
&lt;td&gt;pass&lt;/td&gt;
&lt;td&gt;パスワード&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;3. &lt;code&gt;SAVE&lt;/code&gt;を押す（&lt;strong&gt;忘れないこと&lt;/strong&gt;）&lt;br /&gt;
4. &lt;code&gt;Ports&lt;/code&gt;のタブを選択&lt;br /&gt;
5. &lt;code&gt;MAC IP:PORT&lt;/code&gt;の項目の下に&lt;code&gt;Docker&lt;/code&gt;のIPアドレスが表示されているので、
&lt;code&gt;:&lt;/code&gt;の後ろにポート番号を入れる&lt;br /&gt;
6. &lt;code&gt;SAVE&lt;/code&gt;を押す（&lt;strong&gt;忘れないこと&lt;/strong&gt;）&lt;br /&gt;
7. 再起動がかかるはずなので、&lt;code&gt;Home&lt;/code&gt;のタブを選択&lt;br /&gt;
8. ログに&lt;code&gt;mysqld: ready for connections.&lt;/code&gt;と出ていればOK&lt;br /&gt;
9. 右側の&lt;code&gt;ACCESS URL&lt;/code&gt;のIPアドレスを確認しておく&lt;/p&gt;

&lt;p&gt;※ポートの指定をしない場合は、適当なポートが割り振られ、
起動毎にポートが変わる可能性があるので指定しておくこと&lt;/p&gt;

&lt;h3 id=&#34;接続確認&#34;&gt;接続確認&lt;/h3&gt;

&lt;p&gt;1. &lt;code&gt;PhpStorm&lt;/code&gt;で適当なプロジェクトを作って起動&lt;br /&gt;
2. メニューの&lt;code&gt;View&lt;/code&gt; - &lt;code&gt;Tool Windows&lt;/code&gt; - &lt;code&gt;Database&lt;/code&gt;を選択&lt;br /&gt;
3. ツールウィンドウの左上の&lt;code&gt;+&lt;/code&gt; - &lt;code&gt;Data Source&lt;/code&gt; - &lt;code&gt;MySQL&lt;/code&gt;を選択&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;192.168.99.100&lt;/td&gt;
&lt;td&gt;前項9で確認したIPアドレス&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;前項5で指定したポート&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;testdb&lt;/td&gt;
&lt;td&gt;データベース名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;ユーザ名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;td&gt;pass&lt;/td&gt;
&lt;td&gt;パスワード&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;4. &lt;code&gt;Test Connection&lt;/code&gt;を押して&lt;code&gt;Successful&lt;/code&gt;と出れば接続OK&lt;br /&gt;
5. &lt;code&gt;Options&lt;/code&gt;タブを選択&lt;br /&gt;
6. &lt;code&gt;Resolve ...&lt;/code&gt;の欄でDB名にチェックを入れる&lt;br /&gt;
7. &lt;code&gt;OK&lt;/code&gt;で閉じるとツールウィンドウ内にDBが表示される&lt;/p&gt;

&lt;p&gt;あとはPhpStormのGUIでDB内のデータを表示や操作させたり、SQLを実行したり自由にできる&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;頻繁に使うものならともかく、使い捨てやまれなものは、やっぱりGUIで操作できると助かる&lt;/p&gt;

&lt;p&gt;特に今回は&lt;code&gt;PhpStorm&lt;/code&gt;を使って、実際の開発環境でDBの確認や操作が楽にするのがポイント&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PhpStorm&lt;/code&gt;はアップデートも早いし機能も豊富で素晴らしいツール！
ただ、もうちょっと日本語の資料が多いとありがたい（他力本願）&lt;/p&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;macOS 10.12.0&lt;/li&gt;
&lt;li&gt;PhpStorm 2016.2&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ATS有効の状態でオレオレ証明書を使って通信する(iOS9)</title>
      <link>https://mike-neko.github.io/blog/ios-cert/</link>
      <pubDate>Tue, 06 Sep 2016 00:35:57 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/ios-cert/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ATS&lt;/code&gt;が有効の場合、SSL/TLS通信でないと通信自体ができない。&lt;/p&gt;

&lt;p&gt;が、開発時はローカル環境だったりドメイン自体がなかったりで正式なSSL証明書を使えないことが多い・・・
かといって、ATSをOFFにして開発するのも・・・&lt;/p&gt;

&lt;p&gt;って時に自己署名証明書（オレオレ証明書）を使ってしのぐ方法。&lt;/p&gt;

&lt;p&gt;流れとしては、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;オレオレ証明書を作ってサーバへ設定&lt;/li&gt;
&lt;li&gt;iOS端末へオレオレ証明書をインストール&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となる。&lt;br /&gt;
ポイントはオレオレ証明書のインストール部分で、その手順をメモしておく。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;証明書の作成のあたりは&lt;a href=&#34;../docker/&#34;&gt;Docker構築メモ&lt;/a&gt;を参照&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;注意&#34;&gt;！注意！&lt;/h2&gt;

&lt;p&gt;検証はiOS9でのみ。iOS10は未検証。
（ローカル環境でのATSの挙動が変わりそう！？）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Apple Configurator&lt;/code&gt;は&lt;code&gt;2.2&lt;/code&gt;の操作方法。&lt;/p&gt;

&lt;p&gt;また、&lt;strong&gt;セキュリティ面で危険&lt;/strong&gt;なのでくれぐれもオレオレ証明書の容量・用法には気をつけること&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;p&gt;前提：サーバへのオレオレ証明書は設定済みの状態&lt;/p&gt;

&lt;h3 id=&#34;準備&#34;&gt;準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;オレオレ証明書&lt;code&gt;server.crt&lt;/code&gt;を作成しておく&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apple Configurator2&lt;/code&gt;をインストールしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;構成プロファイルの作成&#34;&gt;構成プロファイルの作成&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Apple Configurator&lt;/code&gt;のメニューの&lt;code&gt;ファイル&lt;/code&gt;から&lt;code&gt;新規プロファイル&lt;/code&gt;を選択&lt;/li&gt;
&lt;li&gt;左側の&lt;code&gt;証明書&lt;/code&gt;の項目を選択し&lt;code&gt;構成&lt;/code&gt;ボタンを押下&lt;/li&gt;
&lt;li&gt;ファイル選択画面でオレオレ証明書(&lt;code&gt;server.crt&lt;/code&gt;)を選択して開く&lt;/li&gt;
&lt;li&gt;メニューの&lt;code&gt;ファイル&lt;/code&gt;から&lt;code&gt;保存&lt;/code&gt;を選択し、適当な名前をつけて保存&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;端末へインストール&#34;&gt;端末へインストール&lt;/h3&gt;

&lt;p&gt;以下のどちらかの方法でインストールする&lt;/p&gt;

&lt;h4 id=&#34;apple-configurator経由&#34;&gt;Apple Configurator経由&lt;/h4&gt;

&lt;p&gt;Macと端末の有線接続が必要&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Apple Configurator&lt;/code&gt;に接続中の端末が表示されるので選択&lt;/li&gt;
&lt;li&gt;ツールバーの&lt;code&gt;追加&lt;/code&gt;ボタンから&lt;code&gt;プロファイル&lt;/code&gt;を選択&lt;/li&gt;
&lt;li&gt;作成した構成プロファイルを選択&lt;/li&gt;
&lt;li&gt;iOS端末の画面がインストール画面に変わるので、&lt;code&gt;インストール&lt;/code&gt;x3&lt;br /&gt;
（プロファイルのインストールはConfiguratorから操作不可）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;ネットワーク経由&#34;&gt;ネットワーク経由&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;適当なサーバに構成プロファイルを置いてダウンロードできるようにする&lt;/li&gt;
&lt;li&gt;iOS端末のSafariから該当のURLへアクセス&lt;/li&gt;
&lt;li&gt;インストール画面になるので&lt;code&gt;インストール&lt;/code&gt;x3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なお、証明書だけをインストールしてもアプリからは接続できないので、
&lt;code&gt;構成プロファイル&lt;/code&gt;を作ってからインストールするのが大事！&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Appleのテクニカルノート：&lt;a href=&#34;https://developer.apple.com/library/ios/technotes/tn2326/_index.html&#34;&gt;TLSのテスト用証明書の作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;OS X 10.11.5&lt;/li&gt;
&lt;li&gt;Xcode 7.3.1&lt;/li&gt;
&lt;li&gt;iOS 9.3.4&lt;/li&gt;
&lt;li&gt;iPhone 6+&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>