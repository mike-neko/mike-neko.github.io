<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metal on M.Ikeの小ネタ集</title>
    <link>https://mike-neko.github.io/tags/metal/</link>
    <description>Recent content in Metal on M.Ikeの小ネタ集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 31 Dec 2018 15:09:29 +0900</lastBuildDate>
    
	<atom:link href="https://mike-neko.github.io/tags/metal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018年の発表資料 - 「Swiftとメモリ管理」</title>
      <link>https://mike-neko.github.io/blog/speak-1802/</link>
      <pubDate>Mon, 31 Dec 2018 15:09:29 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/speak-1802/</guid>
      <description>&lt;p&gt;2018年の振り返りをかねて、勉強会で発表した内容のまとめ&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt; 第77回 Cocoa勉強会関西で「Swiftとメモリ管理」を発表&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018年の発表資料 - 「進化するCoreML」</title>
      <link>https://mike-neko.github.io/blog/speak-1801/</link>
      <pubDate>Mon, 31 Dec 2018 15:09:29 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/speak-1801/</guid>
      <description>&lt;p&gt;2018年の振り返りをかねて、勉強会で発表した内容のまとめ&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; 第76回 Cocoa勉強会関西で「進化するCoreML」を発表&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017年の発表資料 - 「MetalでTessellation」</title>
      <link>https://mike-neko.github.io/blog/speak-1701/</link>
      <pubDate>Sun, 31 Dec 2017 15:09:29 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/speak-1701/</guid>
      <description>&lt;p&gt;2017年の振り返りをかねて、勉強会で発表した内容のまとめ&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;11&lt;/sub&gt; 第71回 Cocoa勉強会関西で「MetalでTessellation」を発表&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>画像をグレースケールへ変換する（Metal編）</title>
      <link>https://mike-neko.github.io/blog/metalgray/</link>
      <pubDate>Wed, 03 May 2017 00:11:00 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metalgray/</guid>
      <description>&lt;p&gt;RGBの&lt;code&gt;MTLTexture&lt;/code&gt;をグレースケールの&lt;code&gt;MTLTexture&lt;/code&gt;に変換する方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UIImage&lt;/code&gt;を変換する方法は&lt;a href=&#34;../grayimage&#34;&gt;こちら&lt;/a&gt;を参照
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Model I/Oでモデルをロード</title>
      <link>https://mike-neko.github.io/blog/modelio-load/</link>
      <pubDate>Wed, 29 Mar 2017 00:58:37 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/modelio-load/</guid>
      <description>&lt;p&gt;MetalでModel I/O経由でモデルをファイルからロードする方法&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/samplecode/MetalKitEssentials/Introduction/Intro.html&#34;&gt;公式サンプル&lt;/a&gt;よりもシンプルな方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Model I/Oで立体図形のメッシュを生成</title>
      <link>https://mike-neko.github.io/blog/modelio-mesh/</link>
      <pubDate>Sun, 05 Mar 2017 22:36:43 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/modelio-mesh/</guid>
      <description>&lt;p&gt;Metalで描画のテストなどでさくっとモデルを表示したい時に、Model I/Oを使って3Dのモデルを生成する方法&lt;/p&gt;

&lt;p&gt;法線やUV座標も作ってくれるので地味に便利である&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metalの座標周りのメモ</title>
      <link>https://mike-neko.github.io/blog/metal-coordinate/</link>
      <pubDate>Thu, 02 Mar 2017 23:36:28 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-coordinate/</guid>
      <description>&lt;p&gt;わりと間違いやすいので、Metalの座標周りのまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SceneKitでMetalのシェーダを利用する(SCNProgram)</title>
      <link>https://mike-neko.github.io/blog/metalshader-scenekit/</link>
      <pubDate>Sun, 10 Jul 2016 18:28:58 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metalshader-scenekit/</guid>
      <description>&lt;p&gt;&lt;code&gt;Metal&lt;/code&gt;を使いたい場合にネックとなるのが、シーンの構築とかモデル・テクスチャの管理。
なので、その面倒な部分を&lt;code&gt;SceneKit&lt;/code&gt;に任せたいという時の話。&lt;/p&gt;

&lt;p&gt;今回は描画周りに&lt;code&gt;Metal&lt;/code&gt;のシェーダを使うパターン。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metalによる砂のシミュレーションもどき</title>
      <link>https://mike-neko.github.io/blog/metal-sand/</link>
      <pubDate>Thu, 25 Feb 2016 22:05:16 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-sand/</guid>
      <description>&lt;p&gt;MetalのGPGPUによる大量のパーティクル処理能力を活かしたデモ。
パーティクルをそれぞれ砂の一粒に見立てており、上から落下してきた砂粒が山のように積みあがっていく様子をシュミレートしている。&lt;/p&gt;

&lt;p&gt;なお、これも約26万パーティクルで60FPSを維持している。&lt;/p&gt;

&lt;h2 id=&#34;動作イメージ&#34;&gt;動作イメージ&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>MetalのGPGPUによるパーティクルデモ</title>
      <link>https://mike-neko.github.io/blog/metal-image/</link>
      <pubDate>Thu, 11 Feb 2016 09:20:27 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-image/</guid>
      <description>&lt;p&gt;読み込んだテクスチャをパーティクルに分解して動かすデモ。動きは滝のように画像がパーティクルに分解して落下していくのをイメージ。&lt;/p&gt;

&lt;p&gt;画像サイズが512*512、1ピクセル=1パーティクルに分解するので、約26万個のパーティクルを動かしているが、60FPSを維持している。約100万まで増やすとiPhone6+で30FPSぐらいとなる。&lt;/p&gt;

&lt;p&gt;そんなに複雑な計算をさせていないとはいえ、さすがGPGPUといったところ。なお、処理時間のほとんどはGPGPUの部分でCPUは余力がある様子。&lt;/p&gt;

&lt;h2 id=&#34;動作イメージ&#34;&gt;動作イメージ&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Metal組み込み関数</title>
      <link>https://mike-neko.github.io/blog/metal-function/</link>
      <pubDate>Thu, 28 Jan 2016 22:32:26 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-function/</guid>
      <description>&lt;h2 id=&#34;metalのシェーダで利用できる関数のまとめ&#34;&gt;Metalのシェーダで利用できる関数のまとめ&lt;/h2&gt;

&lt;h4 id=&#34;hlsl-glslは各言語との対比&#34;&gt;HLSL/GLSLは各言語との対比&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;(空白) : 同じ&lt;/li&gt;
&lt;li&gt;ー : 該当なし&lt;/li&gt;
&lt;li&gt;△ : 同等の関数があるが詳細が異なる&lt;/li&gt;
&lt;li&gt;(関数名) : 挙動は同じだが、名前が別の関数がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MetalのGPGPUによるPerlinノイズ</title>
      <link>https://mike-neko.github.io/blog/metal-noise/</link>
      <pubDate>Mon, 25 Jan 2016 19:41:59 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-noise/</guid>
      <description>&lt;p&gt;GPGPUでリアルタイムにパーリンノイズを生成しテクスチャに書き込んで表示するデモ。&lt;/p&gt;

&lt;p&gt;パーリンノイズはGPU Gems2の改良パーリンノイズで、それを元にした数種類を選択可能。
デモでは3次元ノイズを生成し、z値だけを時間で加算していきノイズを変化させている。&lt;/p&gt;

&lt;h2 id=&#34;動作イメージ&#34;&gt;動作イメージ&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>MetalKitのSwift版サンプル</title>
      <link>https://mike-neko.github.io/blog/metal-model/</link>
      <pubDate>Fri, 22 Jan 2016 00:23:56 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-model/</guid>
      <description>&lt;p&gt;元ネタのApple公式の&lt;a href=&#34;https://developer.apple.com/library/mac/samplecode/MetalKitEssentials/Introduction/Intro.html&#34;&gt;MetalKitEssentials&lt;/a&gt;をSwiftで書き直し＋αしたもの。
内容は主にMetalKitを使って、obj形式のモデルをテクスチャありで表示させるだけ。
シェーダもいたってシンプルでライトもなし。&lt;br /&gt;
ちなみに、MetalKitは&lt;strong&gt;iOS9以降&lt;/strong&gt;でしか使えないので注意。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>