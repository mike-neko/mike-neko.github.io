<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift3 on M.Ikeの小ネタ集</title>
    <link>https://mike-neko.github.io/tags/swift3/</link>
    <description>Recent content in Swift3 on M.Ikeの小ネタ集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Fri, 17 Nov 2017 17:26:40 +0900</lastBuildDate>
    
	<atom:link href="https://mike-neko.github.io/tags/swift3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PromiseKitの使い方 その1</title>
      <link>https://mike-neko.github.io/blog/promiskit1/</link>
      <pubDate>Fri, 17 Nov 2017 17:26:40 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/promiskit1/</guid>
      <description>&lt;p&gt;Swiftのクロージャはコールバック処理がObjectiveCと比べるとかなり書きやすくなっているが、それでも非同期処理が重なるとコールバック地獄に陥りやすい&lt;/p&gt;

&lt;p&gt;それから脱出するのに役立つのが&lt;code&gt;Promise&lt;/code&gt;で、Swiftでは&lt;a href=&#34;https://github.com/mxcl/PromiseKit&#34;&gt;PromiseKit&lt;/a&gt;というフレームワークで実装されている。その使い方のメモ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文字列の先頭または末尾のTrim(Swift)</title>
      <link>https://mike-neko.github.io/blog/swift-trim/</link>
      <pubDate>Wed, 25 Oct 2017 00:23:56 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/swift-trim/</guid>
      <description>&lt;p&gt;Swiftで&lt;code&gt;LTrim&lt;/code&gt;や&lt;code&gt;RTrim&lt;/code&gt;相当の処理を行う方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift(Xcode)でプリプロセッサを使う</title>
      <link>https://mike-neko.github.io/blog/buildconf/</link>
      <pubDate>Thu, 19 Oct 2017 00:43:57 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/buildconf/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;Xcodeでプリプロセッサによるソースの切り替えを行う方法
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ファイル追記書き込み(Swift)</title>
      <link>https://mike-neko.github.io/blog/outputstream/</link>
      <pubDate>Tue, 10 Oct 2017 23:42:36 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/outputstream/</guid>
      <description>&lt;p&gt;Swiftっぽくファイルの書き込みをする方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>画像をグレースケールへ変換する（Metal編）</title>
      <link>https://mike-neko.github.io/blog/metalgray/</link>
      <pubDate>Wed, 03 May 2017 00:11:00 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metalgray/</guid>
      <description>&lt;p&gt;RGBの&lt;code&gt;MTLTexture&lt;/code&gt;をグレースケールの&lt;code&gt;MTLTexture&lt;/code&gt;に変換する方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UIImage&lt;/code&gt;を変換する方法は&lt;a href=&#34;../grayimage&#34;&gt;こちら&lt;/a&gt;を参照
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UIImageをグレースケールに変換する</title>
      <link>https://mike-neko.github.io/blog/grayimage/</link>
      <pubDate>Mon, 24 Apr 2017 23:44:11 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/grayimage/</guid>
      <description>&lt;p&gt;RGBの&lt;code&gt;UIImage&lt;/code&gt;をグレースケールの&lt;code&gt;UIImage&lt;/code&gt;に変換する方法&lt;/p&gt;

&lt;p&gt;あと&lt;code&gt;CGContext&lt;/code&gt;周りも変わっていたのでそれも兼ねてメモ
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Model I/Oでモデルをロード</title>
      <link>https://mike-neko.github.io/blog/modelio-load/</link>
      <pubDate>Wed, 29 Mar 2017 00:58:37 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/modelio-load/</guid>
      <description>&lt;p&gt;MetalでModel I/O経由でモデルをファイルからロードする方法&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/samplecode/MetalKitEssentials/Introduction/Intro.html&#34;&gt;公式サンプル&lt;/a&gt;よりもシンプルな方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Model I/Oで立体図形のメッシュを生成</title>
      <link>https://mike-neko.github.io/blog/modelio-mesh/</link>
      <pubDate>Sun, 05 Mar 2017 22:36:43 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/modelio-mesh/</guid>
      <description>&lt;p&gt;Metalで描画のテストなどでさくっとモデルを表示したい時に、Model I/Oを使って3Dのモデルを生成する方法&lt;/p&gt;

&lt;p&gt;法線やUV座標も作ってくれるので地味に便利である&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift3のポインタの実践編</title>
      <link>https://mike-neko.github.io/blog/swift-pointerc/</link>
      <pubDate>Fri, 24 Feb 2017 23:44:10 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/swift-pointerc/</guid>
      <description>&lt;p&gt;主にSwiftのポインタとCのポインタとの対比やポインタの変換方法についてのまとめ
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift3のポインタの基礎知識</title>
      <link>https://mike-neko.github.io/blog/swift-pointer/</link>
      <pubDate>Wed, 22 Feb 2017 23:55:36 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/swift-pointer/</guid>
      <description>&lt;p&gt;基本的にSwiftからポインタをそのまま扱う機会はほとんどないが、CのAPIやMetal等でポインタを扱う場合用のメモ&lt;/p&gt;

&lt;p&gt;なお、画像などのバイナリデータを単に扱いたいだけの場合は&lt;code&gt;Data&lt;/code&gt;が&lt;code&gt;UInt8&lt;/code&gt;の配列と同等に扱えるようになったのでそっちを使った方が良い&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHubの自作ライブラリを公開する（ライブラリ編）</title>
      <link>https://mike-neko.github.io/blog/library2/</link>
      <pubDate>Wed, 14 Dec 2016 19:52:13 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/library2/</guid>
      <description>&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;の自作ライブラリ(&lt;a href=&#34;https://github.com/mike-neko/Kanagata&#34;&gt;Kanagata&lt;/a&gt;)をGitHubに公開するにあたってのメモ。
その2ではマルチプラットフォーム対応とライブラリ管理ツールの導入についての内容&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHubの自作ライブラリを公開する（CI導入編）</title>
      <link>https://mike-neko.github.io/blog/library1/</link>
      <pubDate>Wed, 14 Dec 2016 19:51:59 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/library1/</guid>
      <description>&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;の自作ライブラリ(&lt;a href=&#34;https://github.com/mike-neko/Kanagata&#34;&gt;Kanagata&lt;/a&gt;)をGitHubに公開するにあたってのメモ。
その1ではCIの導入周りについての内容&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UIPageViewControllerのエンドレス化などなど</title>
      <link>https://mike-neko.github.io/blog/pageview/</link>
      <pubDate>Tue, 13 Dec 2016 19:33:53 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/pageview/</guid>
      <description>&lt;p&gt;&lt;code&gt;UIPageViewController&lt;/code&gt;をエンドレスでページ切り替えする方法とかその他小ネタ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Provisioning Profileの有効期限をアプリ内で取得</title>
      <link>https://mike-neko.github.io/blog/provisioning/</link>
      <pubDate>Wed, 07 Dec 2016 19:18:57 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/provisioning/</guid>
      <description>&lt;p&gt;&lt;code&gt;AdHoc&lt;/code&gt;で作成したiOSアプリ(ipa)にはプロビジョニングプロファイルの有効期限が存在するが、
その有効期限をアプリ内から確認する方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>multipart/form-dataによるファイルのアップロード</title>
      <link>https://mike-neko.github.io/blog/multipart/</link>
      <pubDate>Tue, 06 Dec 2016 22:04:28 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/multipart/</guid>
      <description>&lt;p&gt;（&lt;code&gt;Alamofire&lt;/code&gt;とかのライブラリを使った方が幸せになれると思うが）
HTMLのフォームからの送信と同じ様な&lt;code&gt;multipart&lt;/code&gt;によるアップロードをiOSからする方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebRTCをiOSネイティブで使う(実装編)</title>
      <link>https://mike-neko.github.io/blog/webrtc-ios/</link>
      <pubDate>Wed, 30 Nov 2016 01:38:22 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/webrtc-ios/</guid>
      <description>&lt;p&gt;iOSで&lt;code&gt;WebRTC&lt;/code&gt;を使ったビデオチャットを作る方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebRTCをiOSネイティブで使う(準備編)</title>
      <link>https://mike-neko.github.io/blog/webrtc-build/</link>
      <pubDate>Tue, 29 Nov 2016 23:24:55 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/webrtc-build/</guid>
      <description>&lt;p&gt;iOSのブラウザでは&lt;code&gt;WebRTC&lt;/code&gt;がサポートされていないので、利用したい場合は
ネイティブのフレームワークを使う必要がある。&lt;/p&gt;

&lt;p&gt;今回の準備編では公式のフレームワークを使うにあたってフレームワークの生成と組み込みまでの手順について&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MultipeerConnectivityでP2P通信</title>
      <link>https://mike-neko.github.io/blog/multipeer/</link>
      <pubDate>Tue, 29 Nov 2016 18:40:09 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/multipeer/</guid>
      <description>&lt;p&gt;iOS同士限定になるが、&lt;code&gt;Multipeer Connectivity Framework&lt;/code&gt;でお手軽にP2P通信をさせる方法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UIScrollViewのAutoLayoutをStoryboardのみで設定</title>
      <link>https://mike-neko.github.io/blog/scrollview/</link>
      <pubDate>Sun, 23 Oct 2016 22:28:33 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/scrollview/</guid>
      <description>&lt;p&gt;Storyboard上だけでUIScrollViewのAutoLayoutを完結させる方法。
中のUIを動的に追加や削除しないのであればコードを書く必要もないし、
&lt;code&gt;UILabel&lt;/code&gt;のようにコンテンツに応じて動的に高さが変わるようなものにも対応可能&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NotificationCenterの使い方</title>
      <link>https://mike-neko.github.io/blog/notification/</link>
      <pubDate>Sun, 23 Oct 2016 18:30:34 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/notification/</guid>
      <description>&lt;p&gt;旧&lt;code&gt;NSNotification&lt;/code&gt;がSwift3でちょっと変更が入ったので使い方と＋αのエクステンションのまとめ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KVOを利用する(Swift)</title>
      <link>https://mike-neko.github.io/blog/swift-kvo/</link>
      <pubDate>Mon, 25 Jul 2016 22:55:03 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/swift-kvo/</guid>
      <description>&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;で&lt;code&gt;KVO&lt;/code&gt;を利用する方法について。特に&lt;code&gt;context&lt;/code&gt;を一意の識別子として使いたい場合の方法
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPアドレス取得のサンプル(Swift)</title>
      <link>https://mike-neko.github.io/blog/ipaddress/</link>
      <pubDate>Mon, 07 Mar 2016 23:59:45 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/ipaddress/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;以下はSwift2の情報で古い為、注意！&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Swift3版のソースは&lt;a href=&#34;https://github.com/mike-neko/NetworkInfo&#34;&gt;こちら&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;(解説はそのうちに・・・・)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;iOS端末のIPアドレスを取得するサンプル。Cの関数呼び出し周りも含めてSwiftにて実装。&lt;/p&gt;

&lt;p&gt;一応、Apple公式の方法でIPv6only環境でも動作確認済。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SwiftでNSExceptionを処理する</title>
      <link>https://mike-neko.github.io/blog/objc-exception/</link>
      <pubDate>Sat, 20 Feb 2016 08:10:44 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/objc-exception/</guid>
      <description>&lt;p&gt;ObjectiveCで書かれた&lt;code&gt;NSException&lt;/code&gt;を発生させるソースをSwiftから利用したい時の処理方法。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NSException&lt;/code&gt;は、ObjectiveCの&lt;code&gt;@try ~ @catch ~ @finally&lt;/code&gt;でしか例外処理を行えない。例外処理を書いていない時は、実行時エラーとして処理される。つまり、Swiftから&lt;code&gt;NSException&lt;/code&gt;を発生させるコードを呼び出して例外が起きると、問答無用でアプリが落ちてしまう・・・&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>