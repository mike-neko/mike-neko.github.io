<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on M.Ikeの小ネタ集</title>
    <link>https://mike-neko.github.io/tags/github/</link>
    <description>Recent content in Github on M.Ikeの小ネタ集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 14 Dec 2016 19:52:13 +0900</lastBuildDate>
    <atom:link href="https://mike-neko.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GitHubの自作ライブラリを公開する（ライブラリ編）</title>
      <link>https://mike-neko.github.io/blog/library2/</link>
      <pubDate>Wed, 14 Dec 2016 19:52:13 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/library2/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;の自作ライブラリ(&lt;a href=&#34;https://github.com/mike-neko/Kanagata&#34;&gt;Kanagata&lt;/a&gt;)をGitHubに公開するにあたってのメモ。
その2ではマルチプラットフォーム対応とライブラリ管理ツールの導入についての内容&lt;/p&gt;

&lt;p&gt;&lt;em&gt;なお、作成するフレームワーク名、プロジェクト名は&lt;code&gt;Kanagata&lt;/code&gt;とした場合の手順なので、
他の作業時は適宜読み替えること&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;その1は&lt;a href=&#34;../library1&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;マルチプラットフォーム対応&#34;&gt;マルチプラットフォーム対応&lt;/h2&gt;

&lt;p&gt;元々は&lt;code&gt;iOS&lt;/code&gt;で作成していたが、特にOS依存するコードもないので、&lt;code&gt;macOS&lt;/code&gt;と&lt;code&gt;watchOS&lt;/code&gt;と&lt;code&gt;tvOS&lt;/code&gt;にも対応させる。
また、ソースとテストは全て共通のものを用いることとする&lt;/p&gt;

&lt;h3 id=&#34;既存ターゲット名変更&#34;&gt;既存ターゲット名変更&lt;/h3&gt;

&lt;p&gt;まず&lt;code&gt;iOS&lt;/code&gt;用のターゲットと判る様にターゲット名を&lt;code&gt;Kanagata&lt;/code&gt;から&lt;code&gt;Kanagata-iOS&lt;/code&gt;へ変更する&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;プロジェクト設定から&lt;code&gt;TARGETS&lt;/code&gt;の中の&lt;code&gt;Kanagata&lt;/code&gt;をクリックして名前を&lt;code&gt;Kanagata-iOS&lt;/code&gt;へ変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Build Settings&lt;/code&gt;の&lt;code&gt;Product Name&lt;/code&gt;を&lt;code&gt;$(TARGET_NAME)&lt;/code&gt;から&lt;code&gt;$(PROJECT_NAME)&lt;/code&gt;へ変更&lt;/li&gt;
&lt;li&gt;スキーム名も&lt;code&gt;Manage Schemes...&lt;/code&gt;から&lt;code&gt;Kanagata&lt;/code&gt;をクリックして名前を&lt;code&gt;Kanagata-iOS&lt;/code&gt;へ変更&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;テスト用のターゲット&lt;code&gt;KanagataTests&lt;/code&gt;も同じ様にターゲット名を&lt;code&gt;KanagataTests-iOS&lt;/code&gt;へ、
&lt;code&gt;Product Name&lt;/code&gt;を`&lt;code&gt;$(PROJECT_NAME)&lt;/code&gt;へ変更する&lt;/p&gt;

&lt;h3 id=&#34;他os用のターゲットを追加&#34;&gt;他OS用のターゲットを追加&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;プロジェクト設定の&lt;code&gt;TARGETS&lt;/code&gt;の下部にある＋からターゲットを追加

&lt;ul&gt;
&lt;li&gt;追加画面の上部でOSを選択してから&lt;code&gt;Framework&lt;/code&gt;を選択&lt;br /&gt;
（各OSで微妙に名前が違うので道具箱とココアのアイコンで見分けること）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Product Name&lt;/code&gt;は&lt;code&gt;Kanagata-(OS名)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Include Unit Tests&lt;/code&gt;にチェック(&lt;code&gt;watchOS&lt;/code&gt;以外)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プロジェクトに&lt;code&gt;Kanagata-(OS名)&lt;/code&gt;と&lt;code&gt;KanagataTests-(OS名)&lt;/code&gt;が追加されるのでフォルダごと削除&lt;/li&gt;
&lt;li&gt;追加したターゲットのバンドルIDから&lt;code&gt;-(OS名)&lt;/code&gt;を削除&lt;br /&gt;
（必要に応じて&lt;code&gt;Signing&lt;/code&gt;と&lt;code&gt;Deployment Target&lt;/code&gt;も修正）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Build Settings&lt;/code&gt;を変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Info.plist File&lt;/code&gt;のパスから&lt;code&gt;-(OS名)&lt;/code&gt;を削除（共通のplistを指す様に）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Product Name&lt;/code&gt;を&lt;code&gt;$(TARGET_NAME)&lt;/code&gt;から&lt;code&gt;$(PROJECT_NAME)&lt;/code&gt;へ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;テスト用のターゲットも同じ様にバンドルID、&lt;code&gt;Signing&lt;/code&gt;、&lt;code&gt;Build Settings&lt;/code&gt;の各項目を修正する&lt;/p&gt;

&lt;p&gt;ここで一旦ビルドとテストを実行して問題なければ次へ&lt;/p&gt;

&lt;h3 id=&#34;travisciへの追加&#34;&gt;travisCIへの追加&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;追加されたOSの各スキームの&lt;code&gt;Shared&lt;/code&gt;をチェック&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt;を修正&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;用のスキーム名を&lt;code&gt;Kanagata&lt;/code&gt;から&lt;code&gt;Kanagata-iOS&lt;/code&gt;へ変更&lt;/li&gt;
&lt;li&gt;追加された&lt;code&gt;macOS&lt;/code&gt;と&lt;code&gt;tvOS&lt;/code&gt;の分のテストを追加（以下の設定）
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- xcodebuild test -scheme Kanagata-macOS -destination &#39;platform=OS X&#39;
- xcodebuild test -scheme Kanagata-tvOS -destination &#39;platform=tvOS Simulator,name=Apple TV 1080p&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;pushしてエラーがなければ次へ&lt;/p&gt;

&lt;h2 id=&#34;ライブラリ管理ツールへの対応&#34;&gt;ライブラリ管理ツールへの対応&lt;/h2&gt;

&lt;p&gt;個人的にはシンプルな&lt;code&gt;Carthage&lt;/code&gt;がお気に入り。
&lt;code&gt;CocoaPods&lt;/code&gt;はプロジェクトの設定がいじられてしまうのが気になるのであまり使っていないが、
周りでは使っている人も多いので対応する&lt;/p&gt;

&lt;p&gt;なお、あらかじめ&lt;code&gt;Carthage&lt;/code&gt;も&lt;code&gt;CocoaPods&lt;/code&gt;もインストール済とする&lt;/p&gt;

&lt;h3 id=&#34;carthage&#34;&gt;Carthage&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Carthage&lt;/code&gt;は&lt;code&gt;CocoaPods&lt;/code&gt;と違って登録などの作業は不要で、
GitHubにリリースすれば良い&lt;/p&gt;

&lt;p&gt;まずは、プロジェクトのカレントディレクトリで以下を実行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carthage build --no-skip-current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーなく完了し、&lt;code&gt;Carthage/Build&lt;/code&gt;内に各フレームワークが生成されていればOK&lt;/p&gt;

&lt;p&gt;ビルドに問題なければ&lt;code&gt;GitHub&lt;/code&gt;上のリリースタブからタグをつける&lt;br /&gt;
(この時はバージョンとして&lt;code&gt;0.1.0&lt;/code&gt;の様に数字のみをつけるのが良い。
vを入れたりすると&lt;code&gt;CocoaPods&lt;/code&gt;でうまくいかないことがあるので)&lt;/p&gt;

&lt;h4 id=&#34;参考-インストール&#34;&gt;（参考）インストール&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Cartfile&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;github &amp;quot;mike-neko/Kanagata&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じ（&lt;code&gt;アカウント名/リポジトリ名&lt;/code&gt;）で追記するだけで利用できる&lt;/p&gt;

&lt;h3 id=&#34;cocoapods&#34;&gt;CocoaPods&lt;/h3&gt;

&lt;p&gt;今回はデモプロジェクトは同梱しないので直接&lt;code&gt;podspec&lt;/code&gt;を作って対応させる&lt;/p&gt;

&lt;h4 id=&#34;podspecの作成&#34;&gt;podspecの作成&lt;/h4&gt;

&lt;p&gt;プロジェクトのカレントディレクトリで以下を実行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod spec create Kanagata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ひな形の&lt;code&gt;Kanagata.podspec&lt;/code&gt;ができるので内容をプロジェクトに合わせて修正していく。
今回は以下の感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pod::Spec.new do |s|
  s.name         = &amp;quot;Kanagata&amp;quot;   // ライブラリ名
  s.version      = &amp;quot;0.1.0&amp;quot;      // バージョン
  s.summary      = &amp;quot;短い説明&amp;quot;
  s.homepage     = &amp;quot;https://github.com/mike-neko/Kanagata&amp;quot;  // GitHub上にしておいた
  s.license      = &amp;quot;MIT&amp;quot;        // ライセンス
  s.author       = { &amp;quot;mike-neko&amp;quot; =&amp;gt; &amp;quot;mike.app.info@gmail.com&amp;quot; } // GitHub上の名前とメール
  s.social_media_url   = &amp;quot;https://twitter.com/m__ike_&amp;quot;          // ツイッターのアドレス
  s.ios.deployment_target = &amp;quot;8.0&amp;quot;           // OS毎のDeployment Targetと合わせる
  s.osx.deployment_target = &amp;quot;10.10&amp;quot;
  s.watchos.deployment_target = &amp;quot;2.0&amp;quot;
  s.tvos.deployment_target = &amp;quot;9.0&amp;quot;
  // GitHubのアドレスとタグの紐付けの設定。tagの方はデフォルトのままが良い
  s.source       = { :git =&amp;gt; &amp;quot;https://github.com/mike-neko/Kanagata.git&amp;quot;, :tag =&amp;gt; &amp;quot;#{s.version}&amp;quot; }
  s.source_files  = &amp;quot;Kanagata/*.swift&amp;quot;      // プロジェクト内でのソースの位置
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本はそのまま埋めていけば良い。ポイントがあるとすると&lt;code&gt;version&lt;/code&gt;の部分は、
数字のみのバージョン(&lt;code&gt;v1.0.0&lt;/code&gt;とかはNG)にして、GitHub上のタグと一致させておくこと。
あとは、忘れずに&lt;code&gt;source_files&lt;/code&gt;を自分のプロジェクトでのソースの位置に合わせること&lt;/p&gt;

&lt;p&gt;一通り作成ができたら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod spec lint Kanagata.podspec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてみてエラーにならなければOK。pushしておく&lt;/p&gt;

&lt;h4 id=&#34;cocoapodsへ登録&#34;&gt;CocoaPodsへ登録&lt;/h4&gt;

&lt;p&gt;（初回のみ）ユーザを登録する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod trunk register (メールアドレス) &#39;(ユーザ名)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行後に入力したメールアドレスへメールが来るので確認をする。&lt;br /&gt;
確認後は&lt;code&gt;pod trunk me&lt;/code&gt;で登録内容が確認出来る&lt;/p&gt;

&lt;p&gt;ユーザ登録ができれば、&lt;code&gt;podspec&lt;/code&gt;を&lt;code&gt;CocoaPods&lt;/code&gt;へ登録&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod trunk push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、&lt;code&gt;podspec&lt;/code&gt;にTwitterを登録していると、無事完了した時にツイートが飛んでくる&lt;/p&gt;

&lt;h4 id=&#34;ciに設定&#34;&gt;CIに設定&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt;に&lt;code&gt;podspec&lt;/code&gt;の検証を追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;script:
  - pod lib lint --allow-warnings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（今回追加した分のみ記載）&lt;/p&gt;

&lt;h4 id=&#34;参考-インストール-1&#34;&gt;（参考）インストール&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Podfile&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;Kanagata&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加すれば利用可能&lt;/p&gt;

&lt;p&gt;また、生成されたドキュメントは、&lt;code&gt;http://cocoadocs.org/docsets/Kanagata/&lt;/code&gt;で見ることが出来る&lt;/p&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;後はバッジを貼ったり、ライセンスを貼ったりすれば、かなりそれっぽい感じになる。
ライブラリとして公開するとなると敷居が高い気がするが、GitHubを使っていればあまり手間をかけることなく公開できる&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GitHubの自作ライブラリを公開する（CI導入編）</title>
      <link>https://mike-neko.github.io/blog/library1/</link>
      <pubDate>Wed, 14 Dec 2016 19:51:59 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/library1/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;の自作ライブラリ(&lt;a href=&#34;https://github.com/mike-neko/Kanagata&#34;&gt;Kanagata&lt;/a&gt;)をGitHubに公開するにあたってのメモ。
その1ではCIの導入周りについての内容&lt;/p&gt;

&lt;p&gt;&lt;em&gt;なお、作成するフレームワーク名、プロジェクト名は&lt;code&gt;Kanagata&lt;/code&gt;とした場合の手順なので、
他の作業時は適宜読み替えること&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;その2は&lt;a href=&#34;../library2&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;構成&#34;&gt;構成&lt;/h2&gt;

&lt;p&gt;せっかくなので単なるライブラリの公開だけでなく、以下の感じでそれっぽく公開&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CIの導入(&lt;code&gt;TravisCI&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;ユニットテスト(&lt;code&gt;XCTest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;カバレッジ表示(&lt;code&gt;Codecov&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;静的コード解析(&lt;code&gt;SwiftLint&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ドキュメント生成(&lt;code&gt;juzzy&lt;/code&gt;)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;マルチプラットフォーム対応(iOS以外も)&lt;/li&gt;
&lt;li&gt;ライブラリ管理ツール

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Carthage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CocoaPods&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ciの導入&#34;&gt;CIの導入&lt;/h2&gt;

&lt;h3 id=&#34;プロジェクトの作成&#34;&gt;プロジェクトの作成&lt;/h3&gt;

&lt;p&gt;今回は既存のプロジェクトの中で使っていたものをフレームワークとして切り出す為、まずは新規プロジェクトを作成&lt;/p&gt;

&lt;p&gt;作成時には、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cocoa Touch Framework&lt;/code&gt;を選択&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Include Unit Tests&lt;/code&gt;にチェック&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をつけて作成する。
既存のソースとテストの各ファイルを移植したら、&lt;code&gt;.h&lt;/code&gt;のファイルを削除
（Swiftのみなのでヘッダは不要）&lt;/p&gt;

&lt;p&gt;ちなみに、ここで一旦ビルドとテストを実行すると&lt;code&gt;module file&#39;s minimum deployment target is ios10.1&lt;/code&gt;のエラー。。。
その時の&lt;code&gt;Deployment Target&lt;/code&gt;はiOS9で問題ないはず。が、iOS10へ変更したりクリーンをしたりしても変わらず。
最後にダメ元でiOS9のシミュレータをDLしてみると、無事完了。
他の環境で試すと再現しなかったりで、結局原因はよく判らなかった・・・・&lt;/p&gt;

&lt;p&gt;さて、無事？テストも通ったのでGitHubへpushしておく&lt;/p&gt;

&lt;h3 id=&#34;travisci&#34;&gt;TravisCI&lt;/h3&gt;

&lt;p&gt;CIツールに&lt;a href=&#34;https://travis-ci.org&#34;&gt;TravisCI&lt;/a&gt;を選択したのは、GitHubと連携できてiOSのビルドができて*タダ*なので&lt;/p&gt;

&lt;h4 id=&#34;登録&#34;&gt;登録&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;トップページから&lt;code&gt;Sign in with GitHub&lt;/code&gt;のボタンを押して、GitHubとの連携を許可&lt;/li&gt;
&lt;li&gt;しばらくすると、GitHubのリポジトリの一覧が表示される&lt;br /&gt;
(表示されない時は再ログインしてみればOK)&lt;/li&gt;
&lt;li&gt;今回のプロジェクトを選んで有効化&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;プロジェクトの修正&#34;&gt;プロジェクトの修正&lt;/h4&gt;

&lt;p&gt;登録が終わればXcodeの&lt;code&gt;Scheme&lt;/code&gt;の設定を変更する&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shared&lt;/code&gt;にチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Test&lt;/code&gt;の中の&lt;code&gt;Gather coverage data&lt;/code&gt;にチェック&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この時のスキーム名はCIの設定で使うので覚えておくこと！&lt;/p&gt;

&lt;h4 id=&#34;設定&#34;&gt;設定&lt;/h4&gt;

&lt;p&gt;リポジトリの直下に&lt;code&gt;.travis.yml&lt;/code&gt;を追加し、CIで行う作業を設定する&lt;/p&gt;

&lt;p&gt;この書き方がよく判らなかったので、いろいろなライブラリのリポジトリを見て
試した結果たどり着いた書き方（テストを実行するだけの最低限）がこちら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: objective-c  # Swiftだけどobjective-cを指定
osx_image: xcode8.1    # 使っているXcodeのバージョン
script:
  # テストを実行(schemeにスキーム名を指定する)
  - xcodebuild test -scheme Kanagata -sdk iphonesimulator -destination &#39;platform=iOS Simulator,name=iPhone 5&#39;
notifications:
  email: false         # メール通知はOFF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変更が終わればスキームと&lt;code&gt;.travis.yml&lt;/code&gt;の変更分をpushする。&lt;br /&gt;
その後はpushする毎に自動でCIが走るようになる
（だいたい、pushしてから15分程度で開始されることが多い感じ）&lt;/p&gt;

&lt;h3 id=&#34;カバレッジ表示&#34;&gt;カバレッジ表示&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TravisCI&lt;/code&gt;と&lt;code&gt;Swift&lt;/code&gt;に対応していてバッジが表示できて*タダ*のものということで、
&lt;a href=&#34;https://codecov.io/&#34;&gt;Codecov&lt;/a&gt;を選択&lt;br /&gt;
開発時はXcode内でカバレッジを見るのでどういう詳細表示がされるのかは重視していない&lt;/p&gt;

&lt;h4 id=&#34;登録と設定&#34;&gt;登録と設定&lt;/h4&gt;

&lt;p&gt;こちらも&lt;code&gt;TravisCI&lt;/code&gt;と同じくGitHubとの連携だけで登録完了&lt;/p&gt;

&lt;p&gt;便利なのが、リポジトリを選択すると&lt;code&gt;TravisCI&lt;/code&gt;に設定するコードを表示してくれること。&lt;br /&gt;
表示されたコードを&lt;code&gt;.travis.yml&lt;/code&gt;に追加すればOK&lt;/p&gt;

&lt;h4 id=&#34;ignoreの設定&#34;&gt;ignoreの設定&lt;/h4&gt;

&lt;p&gt;デフォルトの状態ではリポジトリ内全部が対象となるので、テスト用のコードもカウントされてしまい、
正しくないカバレッジが表示されてしまう。それを防ぐため、テスト用のコードは対象外とする様に設定する&lt;/p&gt;

&lt;p&gt;リポジトリ直下に&lt;code&gt;codecov.yml&lt;/code&gt;を追加し、以下を追記する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ignore:
  - &amp;quot;KanagataTests&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで&lt;code&gt;KanagataTests&lt;/code&gt;以下のフォルダは対象外となる&lt;/p&gt;

&lt;h3 id=&#34;swiftlint&#34;&gt;SwiftLint&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;には&lt;code&gt;Auto-correct&lt;/code&gt;というコードフォーマッタの機能があり、
これを使いたいので導入した&lt;/p&gt;

&lt;h4 id=&#34;インストール&#34;&gt;インストール&lt;/h4&gt;

&lt;p&gt;なぜか&lt;code&gt;Sierra&lt;/code&gt;では&lt;code&gt;Homebrew&lt;/code&gt;でインストールできなかったので、パッケージからインストール&lt;/p&gt;

&lt;h4 id=&#34;xcodeに設定&#34;&gt;Xcodeに設定&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Auto-correct&lt;/code&gt;はビルド時に毎回走らせたいので、Xcode上でのビルド設定に追加する&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;フレームワーク用のターゲットの&lt;code&gt;Bulid Phases&lt;/code&gt;を開く&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;New Run Script Phase&lt;/code&gt;で以下のスクリプトを追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if which swiftlint &amp;gt;/dev/null; then
swiftlint autocorrect
swiftlint
else
echo &amp;quot;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;追加した&lt;code&gt;Run Script&lt;/code&gt;を&lt;code&gt;Compile Sources&lt;/code&gt;より上に移動&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これでビルドを試してみて、たくさんエラーとワーニングが出ればOK&lt;/p&gt;

&lt;h4 id=&#34;ルールのカスタマイズ&#34;&gt;ルールのカスタマイズ&lt;/h4&gt;

&lt;p&gt;デフォルトの状態ではかなり厳しい設定で、エラーやワーニングが出まくるので調整する&lt;/p&gt;

&lt;p&gt;リポジトリ直下に&lt;code&gt;.swiftlint.yml&lt;/code&gt;を追加し、無視するルールや変更する基準値を書いていく&lt;/p&gt;

&lt;p&gt;調整内容は各プロジェクトにもよるが、今回は以下の感じに調整した&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;included:
  - Kanagata
variable_name:
  min_length: 0
line_length:
  - 120
  - 150
type_body_length:
  - 350
  - 400
function_body_length:
  - 50
  - 100
cyclomatic_complexity: 25
disabled_rules:
  - nesting
  - file_length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的には1ファイルに詰め込んだ都合上、行数制限をゆるめに設定。
また、JSONの構造上、再起処理や型ごとの処理で複雑性が増しているのでそこもゆるめにした&lt;/p&gt;

&lt;h4 id=&#34;ciに設定&#34;&gt;CIに設定&lt;/h4&gt;

&lt;p&gt;CIの時にはチェックだけされる様に設定を&lt;code&gt;.travis.yml&lt;/code&gt;に追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;before_install:
  - brew update
  - brew install swiftlint
script:
  - swiftlint   # xcodebuild testより前にしておく
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（今回追加した分のみ記載）&lt;/p&gt;

&lt;p&gt;CI環境には&lt;code&gt;SwiftLint&lt;/code&gt;が入っていないので実行前にインストールが必要。
なお、&lt;code&gt;Homebrew&lt;/code&gt;ではなく、パッケージからインストールさせるとCIにかかる時間が減るらしい&lt;/p&gt;

&lt;h3 id=&#34;バッジを貼る&#34;&gt;バッジを貼る&lt;/h3&gt;

&lt;h4 id=&#34;travisci-1&#34;&gt;TravisCI&lt;/h4&gt;

&lt;p&gt;リポジトリのビルド結果の画面の中に表示されているバッジをクリックすると、
貼り付ける用のURLが出てくるので、*マークダウン*形式をコピーして&lt;code&gt;README&lt;/code&gt;に貼り付け&lt;/p&gt;

&lt;h4 id=&#34;codecov&#34;&gt;Codecov&lt;/h4&gt;

&lt;p&gt;リポジトリの画面の中の&lt;code&gt;Settings&lt;/code&gt; - &lt;code&gt;Badge&lt;/code&gt;で貼り付ける用のURLが出てくるので、
こちらも*マークダウン*形式をコピーして&lt;code&gt;README&lt;/code&gt;に貼り付け&lt;/p&gt;

&lt;h2 id=&#34;ドキュメント生成&#34;&gt;ドキュメント生成&lt;/h2&gt;

&lt;p&gt;基本&lt;code&gt;public&lt;/code&gt;になるものにはドキュメントコメントをつけていて、&lt;code&gt;juzzy&lt;/code&gt;でドキュメント生成をしていたが、
&lt;code&gt;CocoaPods&lt;/code&gt;に公開すれば&lt;code&gt;CocoaDocs&lt;/code&gt;が出来上がるので不要に。。。&lt;/p&gt;

&lt;h2 id=&#34;一旦-まとめ&#34;&gt;一旦、まとめ&lt;/h2&gt;

&lt;p&gt;ここまでの手順で、pushすると&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SwiftLint&lt;/code&gt;で静的解析&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XCTest&lt;/code&gt;でユニットテスト&lt;/li&gt;
&lt;li&gt;ユニットテストのカバレッジを送信&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;といったところまで自動で実行される状態となる&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org&#34;&gt;TravisCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codecov.io/&#34;&gt;Codecov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GitHubにタグ付けする</title>
      <link>https://mike-neko.github.io/blog/gittag/</link>
      <pubDate>Tue, 02 Aug 2016 21:36:00 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/gittag/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;GitHubにタグを付ける方法。
&lt;code&gt;GitHub Desktop&lt;/code&gt;はブランチ周りはサポートしているけどタグ関係はサポートしていないのでメモしておく。&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GitHub Desktop&lt;/code&gt;でタグ付けしたいリポジトリを選択する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;タグをつけたいコミットを選択し、チェックサムをコピーする&lt;br /&gt;
（下図の赤枠で囲んだ部分だけでOK）
&lt;figure&gt;
	&lt;img src=&#34;https://mike-neko.github.io/media/2016-08-02-gittag/checksum.png&#34; /&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;メニューの&lt;code&gt;Repository&lt;/code&gt;から&lt;code&gt;Open in Terminal&lt;/code&gt;を選択してターミナルを開く&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ターミナルで以下を実行しタグを付ける&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -a [タグ名] -m &amp;quot;メッセージ&amp;quot; [タグ付けするコミットのチェックサム]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例）&lt;code&gt;git tag -a v1.0 -m &amp;quot;drop only&amp;quot; 2a49b78&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ターミナルで以下を実行しタグが付いたか確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git show [タグ名]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例）&lt;code&gt;git show v1.0&lt;/code&gt;&lt;br /&gt;
（タグの一覧を見たい場合は&lt;code&gt;git tag&lt;/code&gt;）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;タグをプッシュする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 特定のタグだけ
git push origin [タグ名]
// プッシュされていない全てのタグ
git push origin --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;githubの状態&#34;&gt;GitHubの状態&lt;/h2&gt;

&lt;p&gt;タグをプッシュすると、GitHub上でも確認できるようになる。&lt;br /&gt;
GitHubではタグは主にリリースと関連づける前提の様子。&lt;/p&gt;

&lt;p&gt;例だと、以下のような感じで反映される。&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&#34;https://mike-neko.github.io/media/2016-08-02-gittag/github.png&#34; /&gt;
&lt;/figure&gt;


&lt;p&gt;タグをつけておくと、zipで直接落とせるので便利！&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%BF%E3%82%B0&#34;&gt;Git の基本 - タグ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのshortcodeのメモ</title>
      <link>https://mike-neko.github.io/blog/hugo-shortcode/</link>
      <pubDate>Tue, 16 Feb 2016 23:07:23 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/hugo-shortcode/</guid>
      <description>

&lt;p&gt;Hugoの&lt;code&gt;shortcode&lt;/code&gt;を使って、記事の中でHTMLのタグをべた書きしなくて良い様にする方法のメモ。あと、おまけで&lt;code&gt;shortcode&lt;/code&gt;をMarkdownの中でエスケープして表示する方法。&lt;/p&gt;

&lt;h2 id=&#34;画像を貼り付けるshortcode&#34;&gt;画像を貼り付けるshortcode&lt;/h2&gt;

&lt;p&gt;Hugoで画像を表示するには、&lt;code&gt;static&lt;/code&gt;の中に置く必要がある。この中は全サイト共通になっているので、整理しやすいように以下のディレクトリ構成にした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- static
    - media
        - 2016-02-16-sprite-shader
            - comp.png
            - beta.gif
        - 2016-02-18-hugo-shortcode
            - sample.jpg
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;media&lt;/code&gt;の中に、記事毎に&lt;code&gt;[作成日付]-[slug]&lt;/code&gt;というディレクトリを作り、その中に画像などのコンテンツを置いている。&lt;/p&gt;

&lt;p&gt;この状態で記事の中で画像を表示させるには、&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/media/2016-02-18-hugo-shortcode/sample.jpg&amp;quot; &amp;gt;}}&lt;/code&gt;となる。&lt;/p&gt;

&lt;p&gt;これを毎回書くのは面倒だが&lt;code&gt;shortcode&lt;/code&gt;を使うと、&lt;code&gt;{{&amp;lt; img &amp;quot;sample.jpg&amp;quot; &amp;gt;}}&lt;/code&gt;とだけ書けばよい。&lt;/p&gt;

&lt;h3 id=&#34;作り方&#34;&gt;作り方&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/layouts/shortcodes/img.html&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;1のファイルに
&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/593de54e0ba8f5db4c6b.js&#34;&gt;&lt;/script&gt;
を貼り付けて保存&lt;/li&gt;
&lt;li&gt;あとは使いたい場所で&lt;code&gt;{{&amp;lt; img &amp;quot;ファイル名&amp;quot; &amp;gt;}}&lt;/code&gt;とすればOK&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;エスケープ方法&#34;&gt;エスケープ方法&lt;/h2&gt;

&lt;p&gt;記事の中で、&lt;code&gt;shortcode&lt;/code&gt;などを表示させたい場合に、そのまま書くと当然ながらそのコードが実行されてしまうので、エスケープが必要となる。&lt;/p&gt;

&lt;p&gt;このエスケープ方法は幾つかある（他にもあるかも）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;をつける方法&lt;br /&gt;
&lt;code&gt;\{\{&amp;lt; コード &amp;gt;}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{&lt;/code&gt;を&lt;code&gt;&amp;amp;lt;&lt;/code&gt;と入力する方法&lt;br /&gt;
&lt;code&gt;{{&amp;amp;lt; コード &amp;gt;}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/**/&lt;/code&gt;のコメントにする方法&lt;br /&gt;
&lt;code&gt;{{/* コード */}}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;で、一番おすすめなのは3の方法。他の方法だと``で囲った時にうまく表示されないので。&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;公式：&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;Hugo - Shortcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo利用方法メモ</title>
      <link>https://mike-neko.github.io/blog/hugo-memo/</link>
      <pubDate>Wed, 20 Jan 2016 22:48:33 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/hugo-memo/</guid>
      <description>

&lt;p&gt;このブログは&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;+&lt;code&gt;GitHub Pages&lt;/code&gt;で公開しているがそれにあたってのメモ&lt;/p&gt;

&lt;p&gt;初めはOctopressを使ってたものの、シンタックスハイライトがどうもうまく好みにならなかったので、結局、１週間ほどでHugoに乗り換え。
Octopressに比べると構成もわかりやすいし、最新の資料が多くてよかった。&lt;br /&gt;
テーマはなるべくシンプル、かつ、スマホでも見やすい&lt;a href=&#34;http://themes.gohugo.io/hyde-x/&#34;&gt;Hyde-X&lt;/a&gt;を選定。
以下はHyde-Xの場合の設定なので、他のテーマでは変わることがあるので注意&lt;/p&gt;

&lt;h2 id=&#34;初期設定&#34;&gt;初期設定&lt;/h2&gt;

&lt;h3 id=&#34;ローカルにディレクトリ作成&#34;&gt;ローカルにディレクトリ作成&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hugo new site &amp;lt;site-name&amp;gt;&lt;/code&gt;で作業用のローカルディレクトリを作成&lt;/li&gt;

&lt;li&gt;&lt;p&gt;公開用ディレクトリを作成してGitを設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;lt;site-name&amp;gt;
mkdir public
git remote add origin https://github.com/&amp;lt;github name&amp;gt;/&amp;lt;github name&amp;gt;.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;を&lt;a href=&#34;https://github.com/github/gitignore&#34;&gt;https://github.com/github/gitignore&lt;/a&gt; から落としてきて、2の&lt;code&gt;public&lt;/code&gt;の中に置く&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;記事のテンプレを作成&#34;&gt;記事のテンプレを作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/archetypes&lt;/code&gt;に&lt;code&gt;default.md&lt;/code&gt;を作成する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date = &amp;quot;now()&amp;quot;
draft = true
slug = &amp;quot;&amp;quot;
title = &amp;quot;&amp;quot;
categories = []
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configを編集&#34;&gt;configを編集&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/config.toml&lt;/code&gt;を環境に合わせて編集する&lt;br /&gt;
（設定方法はテーマのREADME.mdを参照）&lt;/p&gt;

&lt;h3 id=&#34;highlight-jsをカスタマイズ&#34;&gt;highlight.jsをカスタマイズ&lt;/h3&gt;

&lt;p&gt;デフォルトで入っていた分ではSwiftが未対応。。。まぁ基本的にはGistを使う予定だけど、一応使えるように&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlightjs公式&lt;/a&gt;で使いそうなものだけを選択してカスタムパッケージをDL&lt;/li&gt;
&lt;li&gt;DLしたものの中から&lt;code&gt;highlight.pack.js&lt;/code&gt;を&lt;code&gt;&amp;lt;site-name&amp;gt;/themes/hyde-x/static/js/highlight.pack.js&lt;/code&gt;と丸ごと置き換え&lt;/li&gt;
&lt;li&gt;カラースタイルもついでにXcodeにしたいので、DLしたものの中から&lt;code&gt;xcode.css&lt;/code&gt;を&lt;code&gt;&amp;lt;site-name&amp;gt;/themes/hyde-x/static/css/highlight&lt;/code&gt;に追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt;の中の&lt;code&gt;highlight&lt;/code&gt;を&lt;code&gt;xcode&lt;/code&gt;に変更&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで、無事Swiftもハイライトされるようになった。&lt;/p&gt;

&lt;h3 id=&#34;gist埋め込みコードを設定&#34;&gt;Gist埋め込みコードを設定&lt;/h3&gt;

&lt;p&gt;普通にリンクをコピペしても良いのだけれども（&lt;del&gt;GistBoxを使い出したら逆にハッシュだけコピペするのが面倒だったり&lt;/del&gt;）、
せっかくMarkdownで書いているのだから、あまりタグを入れて表記が揺らぐのも微妙なので&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/layouts/shortcodes/gist.html&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;1のファイルに
&lt;code&gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://gist.github.com/{{ .Get 0 }}.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
を貼り付けて保存&lt;/li&gt;
&lt;li&gt;使いたい場所で&lt;br /&gt;
&lt;code&gt;
{{&amp;lt; gist gist_sha1_hash &amp;gt;}}
&lt;/code&gt;&lt;br /&gt;
とすると、
&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/5526bee6ee5efd2fc5a7.js&#34;&gt;&lt;/script&gt;
といった感じで埋め込まれる&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;記事の作成&#34;&gt;記事の作成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;&lt;/code&gt;直下で&lt;code&gt;hugo new post/&amp;lt;file-name&amp;gt;.md&lt;/code&gt;を実行する&lt;/p&gt;

&lt;p&gt;プレビューは&lt;code&gt;hugo server -t Hyde-X -D -w&lt;/code&gt;を実行した後に、&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; へアクセス&lt;/p&gt;

&lt;h2 id=&#34;公開手順&#34;&gt;公開手順&lt;/h2&gt;

&lt;h3 id=&#34;流れ&#34;&gt;流れ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hugo -t Hyde-X&lt;/code&gt;でサイトを生成&lt;br /&gt;
(データ一式がpublicに格納される)&lt;/li&gt;
&lt;li&gt;1のデータをGitで&lt;code&gt;commit&lt;/code&gt;して&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ただ、毎回これをやるのは面倒なので、シェルスクリプトにしておく&lt;/p&gt;

&lt;h3 id=&#34;デプロイ用スクリプト&#34;&gt;デプロイ用スクリプト&lt;/h3&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/3159af7dd05c6278a778.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;githubでの書き方&#34;&gt;GitHubでの書き方&lt;/h1&gt;

&lt;p&gt;参考リンク
&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub専用(公式)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotazi.com/blog/post/2015111301/&#34;&gt;【Hugo】Hosting on GitHub Pages【翻訳】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tanksuzuki.com/post/hugo-github-pages-1/&#34;&gt;Hugoでブログ作成 第一部：Hugoでブログを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cronally.com/embed-gists-with-hugo/&#34;&gt;Hugo Shortcode for Embedded Gists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>