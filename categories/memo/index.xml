<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memo on M.Ikeの小ネタ集</title>
    <link>https://mike-neko.github.io/categories/memo/</link>
    <description>Recent content in Memo on M.Ikeの小ネタ集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 04 Apr 2016 00:35:57 +0900</lastBuildDate>
    <atom:link href="https://mike-neko.github.io/categories/memo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker構築メモ</title>
      <link>https://mike-neko.github.io/blog/docker/</link>
      <pubDate>Mon, 04 Apr 2016 00:35:57 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/docker/</guid>
      <description>

&lt;h2 id=&#34;概要:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;iOS用のサーバ環境をDockerでローカルに構築した時のメモ。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;なお、ローカルの開発用ということでセキュリティは考慮していないので注意&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;要件:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;要件&lt;/h3&gt;

&lt;p&gt;主にAPIでサーバとやりとりするアプリの開発用なので以下の感じ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHPとDBが使えること&lt;/li&gt;
&lt;li&gt;同一LAN内の別の端末からアクセスできること&lt;/li&gt;
&lt;li&gt;SSLが使えること（iOS用）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;環境:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;環境&lt;/h3&gt;

&lt;h4 id=&#34;構成イメージ:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;構成イメージ&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Mac   (192.168.0.2) == ルータ(192.168.0.1) == iPhone(192.168.0.3)  
｜  
VM    (192.168.99.1)  
｜  
Docker(192.168.99.100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;()内はIPアドレス&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ゴールは、iPhone上から&lt;code&gt;https://192.168.0.2&lt;/code&gt;へアクセスするとページが表示(APIの通信)できればOK。&lt;/p&gt;

&lt;h4 id=&#34;mac上-ホストos:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;Mac上(ホストOS)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MacOS 10.11.3(El Capitan)&lt;/li&gt;
&lt;li&gt;VirtualBox 5.0.14&lt;/li&gt;
&lt;li&gt;DockerToolBox 1.10.2&lt;/li&gt;
&lt;li&gt;nginx 1.8.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;docker上-ゲストos:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;Docker上(ゲストOS)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;PHP 5系の最新&lt;br /&gt;
(Xdebug)&lt;/li&gt;
&lt;li&gt;MariaDB&lt;br /&gt;
(phpmyadmin)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;手順:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;手順&lt;/h1&gt;

&lt;h3 id=&#34;dockerのインストール:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;Dockerのインストール&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker-toolbox&#34;&gt;公式&lt;/a&gt;から&lt;code&gt;DockerToolBox&lt;/code&gt;をダウンロードしてインストールを実行&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;途中で&lt;code&gt;Docker Quickstart Terminal&lt;/code&gt;のアイコンがでてきたら起動させる&lt;br /&gt;
（忘れたらアプリケーションにもあるのでそちらから）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;すると勝手にVM作成やらネットワーク設定をしてくれる親切設計なのでクジラが出てくるまで待つ&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;dockercomposeの設定:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;DockerComposeの設定&lt;/h3&gt;

&lt;p&gt;Dockerはコンテナをパーツのように組み合わせて環境を作っていく。&lt;/p&gt;

&lt;p&gt;そのコンテナを作成する際の基本的な流れは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使いたいもののイメージを見つける&lt;br /&gt;
(無ければ&lt;code&gt;Dockerfile&lt;/code&gt;を自力で書く)&lt;/li&gt;
&lt;li&gt;タグを指定してイメージをダウンロード&lt;/li&gt;
&lt;li&gt;コンテナの作成&lt;br /&gt;
(もし足りない設定などあれば&lt;code&gt;Dockerfile&lt;/code&gt;でカスマイズ)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;イメージの検索からコンテナの取得は公式GUIの&lt;code&gt;Kitematic (Beta)&lt;/code&gt;を使うと一気にしてくれるので便利。&lt;/p&gt;

&lt;p&gt;ただ、この方法だと引数の指定が多かったり複数のコンテナを利用する場合は大変なので、
&lt;code&gt;DockerCompose&lt;/code&gt;を用いて管理する。&lt;/p&gt;

&lt;h4 id=&#34;事前準備:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;事前準備&lt;/h4&gt;

&lt;p&gt;まずは適当な場所に、コンテナ毎の&lt;code&gt;Dockerfile&lt;/code&gt;や設定ファイルなどを
まとめておくディレクトリを作ってカレントディレクトリとする。
今回のディレクトリ構成は、以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker
 ├─ docker-compose.yml
 ├─ mariadb              # MariaDB用のフォルダ
 |   └─ my.cnf
 ├─ php                  # PHP用のフォルダ
 |   ├─ Dockerfile
 |   └─ php.ini
 └─ www                  # Apacheのドキュメントルート
     └─ index.html       # 動作確認用のHTML
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;apache-php:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;Apache+PHP&lt;/h4&gt;

&lt;p&gt;ApacheはPHPに同梱されているものを使うのが便利なので、&lt;code&gt;apache&lt;/code&gt;がついているタグのものを使う。
今回は&lt;a href=&#34;https://hub.docker.com/_/php/&#34;&gt;公式&lt;/a&gt;で5系の一番新しいバージョンの&lt;code&gt;5.6.18-apache&lt;/code&gt;を選択。&lt;/p&gt;

&lt;p&gt;で、&lt;code&gt;php.ini&lt;/code&gt;の設定と追加で入れたい拡張モジュール（特に&lt;code&gt;Xdebug&lt;/code&gt;）を&lt;code&gt;Dockerfile&lt;/code&gt;でカスタムしておく。&lt;/p&gt;

&lt;p&gt;DockerComposeの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php:
  build: ./php/　　　　　　　　# php/Dockerfileからビルド
  ports:
    - &amp;quot;80:80&amp;quot;　　　　　　　　　# 80ポートを公開
  volumes:
    - ./www:/var/www/html   # ドキュメントルートを指定
  links:
    - mariadb:mysql         # DBとの接続を指定
  container_name: php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでMac上からは、&lt;code&gt;http://192.168.99.100/index.html&lt;/code&gt;へアクセスすると、
&lt;code&gt;www/index.html&lt;/code&gt;が表示される。&lt;/p&gt;

&lt;h4 id=&#34;mariadb-phpmyadmin:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;MariaDB+phpMyAdmin&lt;/h4&gt;

&lt;p&gt;特に変更点もないのでイメージは公式の最新をそのままを使う。&lt;/p&gt;

&lt;p&gt;DockerComposeの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mariadb:
  image: mariadb:latest           # 常に最新版を使う
  environment:
    MYSQL_ROOT_PASSWORD: pass     # ルートのパスワード
    MYSQL_DATABASE: docker        # DB名
    MYSQL_USER: docker            # ユーザ名
    MYSQL_PASSWORD: docker        # パスワード
  volumes:                        # my.cnfの設定
    - ./mariadb/my.cnf:/etc/mysql/conf.d/my.cnf
  container_name: mariadb

phpmyadmin:
  image: phpmyadmin/phpmyadmin:latest
  container_name: myadmin
  ports:
    - &amp;quot;8080:80&amp;quot;                   # 8080ポートを公開して80へフォワード
  links:
    - mariadb:db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでMac上からは、&lt;code&gt;http://192.168.99.100:8080&lt;/code&gt;へアクセスすると、
&lt;code&gt;phpMyAdmin&lt;/code&gt;のログイン画面が表示され、&lt;code&gt;docker/docker&lt;/code&gt;でログインが可能。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意点としてこの状態ではDBの永続化はできていないので、コンテナを削除するとDBの内容も消える&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;ios端末からのアクセス:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;iOS端末からのアクセス&lt;/h3&gt;

&lt;p&gt;ここまでの状態だとMacからしかアクセスできないので、Mac上で&lt;code&gt;nginx&lt;/code&gt;をリバースプロキシとして動かし、
他のiOS端末からアクセスできるようにする。&lt;/p&gt;

&lt;p&gt;また、iOS9のATSへ対応する為にSSLでアクセスできるようにする。ただしローカル環境なのでオレオレ証明書を利用する。&lt;/p&gt;

&lt;h4 id=&#34;nginxのインストール:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;nginxのインストール&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Homebrew&lt;/code&gt;でインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update
brew install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールできたら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx -t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で設定ファイルの場所を確認し、適当なエディタで開いてリバースプロキシの設定をする。
コメントにしてあるのがデフォルトの設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
  server {
    #listen       8080;
    listen       80;
    location / {
      # root   html;
      # index  index.html index.htm;
      proxy_pass http://127.0.0.1:8080;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sslの証明書について:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;SSLの証明書について&lt;/h4&gt;

&lt;p&gt;今回はnginx部分だけSSLに対応させる。（dockerはHTTPのまま）&lt;/p&gt;

&lt;p&gt;オレオレ証明書作成のiOS向けの設定のポイントは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SHA256で証明書を作成する&lt;br /&gt;
(デフォルトだとSHA1になる)&lt;/li&gt;
&lt;li&gt;Safari以外からアクセスする場合は、証明書作成時のCommonNameをIPアドレスにする&lt;br /&gt;
(つまりIP固定が必要)&lt;/li&gt;
&lt;li&gt;端末へ証明書のインストールが必要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もし、上の条件が満たせない場合は、ATSの設定を変えるとか個別に認証処理を書くなどして回避する必要がある。
（回避できないのもあるけど）&lt;/p&gt;

&lt;h4 id=&#34;sslの証明書の作成:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;SSLの証明書の作成&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out server.key 2048 -sha256
openssl req -new -sha256 -key server.key &amp;gt; server.csr
openssl x509 -days 3650 -sha256 -req -signkey server.key &amp;lt; server.csr &amp;gt; server.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（オレオレ証明書の各項目は&lt;code&gt;CommonName&lt;/code&gt;以外は空白でも動作する）&lt;/p&gt;

&lt;p&gt;生成された&lt;code&gt;server.key&lt;/code&gt;と&lt;code&gt;server.crt&lt;/code&gt;をnginxの設定ファイルと同じディレクトリに置く。&lt;/p&gt;

&lt;p&gt;iOS端末へは&lt;code&gt;server.crt&lt;/code&gt;をインストールする。
（メール添付か適当なWEB上に置いてインストール）&lt;/p&gt;

&lt;p&gt;nginxの設定ファイルに以下を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  listen       443 ssl;
  server_name  localhost;

  ssl_certificate      server.crt;
  ssl_certificate_key  server.key;

  location / {
    proxy_pass http://127.0.0.1:8080;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;vmの設定:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;VMの設定&lt;/h4&gt;

&lt;p&gt;DockerはVirtualBox上で動いているので、VMのポートフォワードを設定が必要となる。
設定は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VBoxManage controlvm &amp;quot;default&amp;quot; natpf1 &amp;quot;nginx,tcp,127.0.0.1,8080,,80&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とする。VirtualBoxを起動して、&lt;code&gt;default-設定-ネットワーク-アダプター1-ポートフォワーディング&lt;/code&gt;からでもOK。&lt;/p&gt;

&lt;h2 id=&#34;起動:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;起動&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Dockerを起動させる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;を置いた場所をカレントディレクトリにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;でコンテナを起動&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo nginx&lt;/code&gt;でnginxを起動&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これでiPhone上からは、&lt;code&gt;https://192.168.0.2/index.html&lt;/code&gt;へアクセスすると、
&lt;code&gt;www/index.html&lt;/code&gt;が表示される。
（ただし、オレオレ証明書なので認証の警告などは出る）&lt;/p&gt;

&lt;h1 id=&#34;感想:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;開発環境をプラグインみたいな感じで構築していけるのと構築内容がテキストで残るのはあとあと楽。&lt;/p&gt;

&lt;p&gt;ただ、サーバ環境とまるまる同じものを構築するならVagrantの方が良いのかも・・・
でも、Dockerはいろいろな環境を次々に試すのには便利なので、使い分けが大事そう。&lt;/p&gt;

&lt;h1 id=&#34;ファイル一式:9f4de33edfbe837dbb3e37ebe79037f8&#34;&gt;ファイル一式&lt;/h1&gt;

&lt;p&gt;実際の各イメージのDockerfileや設定ファイルをまとめたものは
&lt;a href=&#34;https://github.com/mike-neko/Docker/tree/master/SSLWebServer&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerのコマンド備忘録</title>
      <link>https://mike-neko.github.io/blog/docker-cmd/</link>
      <pubDate>Sat, 02 Apr 2016 14:00:57 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/docker-cmd/</guid>
      <description>

&lt;h2 id=&#34;dockerでよく使うコマンド:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;Dockerでよく使うコマンド&lt;/h2&gt;

&lt;h3 id=&#34;イメージ操作:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;イメージ操作&lt;/h3&gt;

&lt;h4 id=&#34;イメージのリスト表示:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;イメージのリスト表示&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;指定したイメージの削除:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;指定したイメージの削除&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rmi [イメージの名前かID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;イメージの指定は&lt;code&gt;IMAGE ID&lt;/code&gt;の先頭数文字での特定が便利&lt;/p&gt;

&lt;h4 id=&#34;イメージの全削除:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;イメージの全削除&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンテナ操作:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;コンテナ操作&lt;/h3&gt;

&lt;h4 id=&#34;コンテナのリスト表示:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;コンテナのリスト表示&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;全部停止:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;全部停止&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;全部削除:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;全部削除&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rm $(docker ps -a -q) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dockercompose:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;DockerCompose&lt;/h3&gt;

&lt;h4 id=&#34;起動:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;起動&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cd [docker-copose.ymlを置いてる場所]
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで&lt;code&gt;build&lt;/code&gt;と&lt;code&gt;pull&lt;/code&gt;と&lt;code&gt;run&lt;/code&gt;を一気にしてくれる&lt;/p&gt;

&lt;h4 id=&#34;停止:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;停止&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nginx:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;nginx&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;80ポートを使う場合はsudoが必要&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;起動-1:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;起動&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;停止-1:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;停止&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;nginx -s stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;再起動:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;再起動&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;PHP&lt;/h2&gt;

&lt;h3 id=&#34;オプション:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;オプション&lt;/h3&gt;

&lt;h4 id=&#34;docker-php-ext-installで指定できるもの:1c4ea1d59e18285c6c3ba7b5bb3a3b42&#34;&gt;docker-php-ext-installで指定できるもの&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;bcmath bz2 calendar ctype curl dba dom enchant exif fileinfo filter ftp gd gettext gmp hash iconv imap interbase intl json ldap mbstring mcrypt mssql mysql mysqli oci8 odbc opcache pcntl pdo pdo_dblib pdo_firebird pdo_mysql pdo_oci pdo_odbc pdo_pgsql pdo_sqlite pgsql phar posix pspell readline recode reflection session shmop simplexml snmp soap sockets spl standard sybase_ct sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter xsl zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(デフォルトのPHPイメージは最低限の状態なのでDockerfileで指定して追加する)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのshortcodeのメモ</title>
      <link>https://mike-neko.github.io/blog/hugo-shortcode/</link>
      <pubDate>Tue, 16 Feb 2016 23:07:23 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/hugo-shortcode/</guid>
      <description>

&lt;p&gt;Hugoの&lt;code&gt;shortcode&lt;/code&gt;を使って、記事の中でHTMLのタグをべた書きしなくて良い様にする方法のメモ。あと、おまけで&lt;code&gt;shortcode&lt;/code&gt;をMarkdownの中でエスケープして表示する方法。&lt;/p&gt;

&lt;h2 id=&#34;画像を貼り付けるshortcode:82b443db7a6a95ed9bb9f499c6e51b27&#34;&gt;画像を貼り付けるshortcode&lt;/h2&gt;

&lt;p&gt;Hugoで画像を表示するには、&lt;code&gt;static&lt;/code&gt;の中に置く必要がある。この中は全サイト共通になっているので、整理しやすいように以下のディレクトリ構成にした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- static
    - media
        - 2016-02-16-sprite-shader
            - comp.png
            - beta.gif
        - 2016-02-18-hugo-shortcode
            - sample.jpg
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;media&lt;/code&gt;の中に、記事毎に&lt;code&gt;[作成日付]-[slug]&lt;/code&gt;というディレクトリを作り、その中に画像などのコンテンツを置いている。&lt;/p&gt;

&lt;p&gt;この状態で記事の中で画像を表示させるには、&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/media/2016-02-18-hugo-shortcode/sample.jpg&amp;quot; &amp;gt;}}&lt;/code&gt;となる。&lt;/p&gt;

&lt;p&gt;これを毎回書くのは面倒だが&lt;code&gt;shortcode&lt;/code&gt;を使うと、&lt;code&gt;{{&amp;lt; img &amp;quot;sample.jpg&amp;quot; &amp;gt;}}&lt;/code&gt;とだけ書けばよい。&lt;/p&gt;

&lt;h3 id=&#34;作り方:82b443db7a6a95ed9bb9f499c6e51b27&#34;&gt;作り方&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/layouts/shortcodes/img.html&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;1のファイルに
&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/593de54e0ba8f5db4c6b.js&#34;&gt;&lt;/script&gt;
を貼り付けて保存&lt;/li&gt;
&lt;li&gt;あとは使いたい場所で&lt;code&gt;{{&amp;lt; img &amp;quot;ファイル名&amp;quot; &amp;gt;}}&lt;/code&gt;とすればOK&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;エスケープ方法:82b443db7a6a95ed9bb9f499c6e51b27&#34;&gt;エスケープ方法&lt;/h2&gt;

&lt;p&gt;記事の中で、&lt;code&gt;shortcode&lt;/code&gt;などを表示させたい場合に、そのまま書くと当然ながらそのコードが実行されてしまうので、エスケープが必要となる。&lt;/p&gt;

&lt;p&gt;このエスケープ方法は幾つかある（他にもあるかも）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;をつける方法&lt;br /&gt;
&lt;code&gt;\{\{&amp;lt; コード &amp;gt;}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{&lt;/code&gt;を&lt;code&gt;&amp;amp;lt;&lt;/code&gt;と入力する方法&lt;br /&gt;
&lt;code&gt;{{&amp;amp;lt; コード &amp;gt;}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/**/&lt;/code&gt;のコメントにする方法&lt;br /&gt;
&lt;code&gt;{{/* コード */}}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;で、一番おすすめなのは3の方法。他の方法だと``で囲った時にうまく表示されないので。&lt;/p&gt;

&lt;h1 id=&#34;参考リンク:82b443db7a6a95ed9bb9f499c6e51b27&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;公式：&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;Hugo - Shortcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Metal組み込み関数</title>
      <link>https://mike-neko.github.io/blog/metal-function/</link>
      <pubDate>Thu, 28 Jan 2016 22:32:26 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/metal-function/</guid>
      <description>

&lt;h2 id=&#34;metalのシェーダで利用できる関数のまとめ:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;Metalのシェーダで利用できる関数のまとめ&lt;/h2&gt;

&lt;h4 id=&#34;hlsl-glslは各言語との対比:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;HLSL/GLSLは各言語との対比&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;(空白) : 同じ&lt;/li&gt;
&lt;li&gt;ー : 該当なし&lt;/li&gt;
&lt;li&gt;△ : 同等の関数があるが詳細が異なる&lt;/li&gt;
&lt;li&gt;(関数名) : 挙動は同じだが、名前が別の関数がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;共通関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;共通関数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;T は浮動小数点数のスカラーかベクター&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T clamp(T x, T min, T max)&lt;/td&gt;
&lt;td&gt;x を [min, max] の範囲にクランプする&lt;br&gt;fmin(fmax(x, min), max) を返す&lt;br&gt;min &amp;gt; maxは&lt;strong&gt;不定&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T mix(T x, T y, T a)&lt;/td&gt;
&lt;td&gt;[x, y] の間の a で線形補間&lt;br&gt;x + (y – x) * a を返す&lt;br&gt;a は 0.0 から 1.0。それ以外は&lt;strong&gt;不定&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;lerp&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T saturate(T x)&lt;/td&gt;
&lt;td&gt;x を [0.0, 1.0] の範囲にクランプして返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T sign(T x)&lt;/td&gt;
&lt;td&gt;x &amp;gt; 0 で 1.0, x &amp;lt; 0 で -1.0,&lt;br&gt;x = -0.0 で -0.0, x = +0.0 で +0.0,&lt;br&gt;x = NaN で 0.0 を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T smoothstep(T e0, T e1, T x)&lt;/td&gt;
&lt;td&gt;x &amp;lt;= e0 で 0.0, x &amp;gt;= e1 で 1.0&lt;BR&gt;それ以外は [0.0, 1.0] の範囲でエルミート補間した値を返す&lt;br&gt;スムーズなトランジションに便利&lt;br&gt;t = clamp((x – e0)/(e1 – e0), 0, 1);&lt;br&gt;return t * t * (3 – 2 * t);と等価&lt;br&gt;e0 &amp;gt;= e1 または&lt;br&gt; x, e0, e1 のいずれかが NaN は&lt;strong&gt;不定&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T step(T edge, T x)&lt;/td&gt;
&lt;td&gt;x &amp;lt; edge で 0.0&lt;br&gt;それ以外は 1.0 を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;整数関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;整数関数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;T は整数のスカラーかベクター&lt;/li&gt;
&lt;li&gt;Tu は符号なし整数のスカラーかベクター&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T abs(T x)&lt;br&gt;T fabs(T x)&lt;/td&gt;
&lt;td&gt;x の絶対値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tu absdiff(T x, T y)&lt;/td&gt;
&lt;td&gt;オーバーフローなしで x - y の絶対値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T clz(T x)&lt;/td&gt;
&lt;td&gt;x の先頭ビットから連続する 0 の個数&lt;br&gt;x = 0 で x の型のビットのサイズを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T ctz(T x)&lt;/td&gt;
&lt;td&gt;x の末尾ビットから連続する 0 の個数&lt;br&gt;x = 0 で x の型のビットのサイズを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T hadd(T x, T y)&lt;/td&gt;
&lt;td&gt;(x + y) &amp;gt;&amp;gt; 1 を返す&lt;br&gt;中間合計はオーバーフローしない&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T madhi(T a, T b, T c)&lt;/td&gt;
&lt;td&gt;mulhi(a, b) + c を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T madsat(T a, T b, T c)&lt;/td&gt;
&lt;td&gt;saturate(a * b + c) を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T max(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の最大値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T min(T x, T x)&lt;/td&gt;
&lt;td&gt;x と y の最小値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T mulhi(T x, T y)&lt;/td&gt;
&lt;td&gt;x * y の結果の上位半分のビットを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T popcount(T x)&lt;/td&gt;
&lt;td&gt;x の 0 ではないビットの数を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T rhadd(T x, T y)&lt;/td&gt;
&lt;td&gt;(x + y + 1) &amp;gt;&amp;gt; 1 を返す&lt;br&gt;中間合計はオーバーフローしない&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T rotate(T v, T i)&lt;/td&gt;
&lt;td&gt;v の各要素に対し対応する i の要素の値のビット数分左へシフトした値を返す&lt;br&gt;あふれたビットは右端から挿入される&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T subsat(T x, T y)&lt;/td&gt;
&lt;td&gt;saturate(x - y) を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;関係関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;関係関数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;T は浮動小数点数のスカラーかベクター&lt;/li&gt;
&lt;li&gt;Ti は整数かブーリアン型のスカラーかベクター&lt;/li&gt;
&lt;li&gt;Tb はブーリアン型のスカラーかベクター&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool all(Tb x)&lt;/td&gt;
&lt;td&gt;x の全ての要素が true の時に true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bool any(Tb x)&lt;/td&gt;
&lt;td&gt;x のいずれかの要素が true の時に true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb isfinite(T x)&lt;/td&gt;
&lt;td&gt;x が有限の場合は true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb isinf(T x)&lt;/td&gt;
&lt;td&gt;x が無限大(+/-)であれば true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb isnan(T x)&lt;/td&gt;
&lt;td&gt;x がNanであれば true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb isnormal(T x)&lt;/td&gt;
&lt;td&gt;x が正規化数であれば true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb isordered(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の引数が順序付けられているか&lt;br&gt;(x == x) &amp;amp;&amp;amp; (y == y) を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb isunordered(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の引数が順序付けられていないか&lt;br&gt;x か y が NaN であれば true を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T select(T a, T b, Tb c)&lt;/td&gt;
&lt;td&gt;result[i] = c[i] ? b[i] : a[i] を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ti select(Ti a, Ti b, Tb c)&lt;/td&gt;
&lt;td&gt;result = c ? b : a　を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Tb signbit(T x)&lt;/td&gt;
&lt;td&gt;符号ビットをテストする&lt;br&gt;x に浮動小数点数がセットされている場合は true&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;数学関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;数学関数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;T は浮動小数点数のスカラーかベクター&lt;/li&gt;
&lt;li&gt;Ti は整数のスカラーかベクター&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T acos(T x)&lt;/td&gt;
&lt;td&gt;x のアークコサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T acosh(T x)&lt;/td&gt;
&lt;td&gt;x のハイパボリックアークコサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T asin(T x)&lt;/td&gt;
&lt;td&gt;x のアークサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T asinh(T x)&lt;/td&gt;
&lt;td&gt;x のハイパボリックアークサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T atan(T x)&lt;/td&gt;
&lt;td&gt;x のアークタンジェントを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T atan2(T y, T x)&lt;/td&gt;
&lt;td&gt;y と x のアークタンジェントを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T atanh(T x)&lt;/td&gt;
&lt;td&gt;x のハイパボリックアークタンジェントを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T ceil(T x)&lt;/td&gt;
&lt;td&gt;x を正の無限大に近いほうの整数に丸めた値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T copysign(T x, T y)&lt;/td&gt;
&lt;td&gt;y の符号に変えた x を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T cos(T x)&lt;/td&gt;
&lt;td&gt;x のコサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T cosh(T x)&lt;/td&gt;
&lt;td&gt;x のハイパボリックコサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T cospi(T x)&lt;/td&gt;
&lt;td&gt;pi * x のコサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T exp(T x)&lt;/td&gt;
&lt;td&gt;e ^ x を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T exp2(T x)&lt;/td&gt;
&lt;td&gt;2 ^ x を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T exp10(T x)&lt;/td&gt;
&lt;td&gt;10 ^ x を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fdim(T x, T y)&lt;/td&gt;
&lt;td&gt;x &amp;gt; y で x - y,&lt;br&gt;x &amp;lt;= y で +0 を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T floor(T x)&lt;/td&gt;
&lt;td&gt;x を負の無限大に近いほうの整数に丸めた値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fma(T a, T b, T c)&lt;/td&gt;
&lt;td&gt;a * b + c を返す&lt;br&gt;融合積和演算(IEEE 754-2008準拠)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fmod(T x, T y)&lt;/td&gt;
&lt;td&gt;x - y * trunc(x / y) を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fract(T x)&lt;/td&gt;
&lt;td&gt;x の小数部を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;frac&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T frexp(T x, Ti &amp;amp;exp)&lt;/td&gt;
&lt;td&gt;x = [返り値] * 2 ^ exp となる&lt;br&gt;返り値は[&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;, 1]の範囲か 0 となる&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ti ilogb(T x)&lt;/td&gt;
&lt;td&gt;x の指数を整数で返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T ldexp(T x, Ti k)&lt;/td&gt;
&lt;td&gt;x * 2 ^ k を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T log(T x)&lt;/td&gt;
&lt;td&gt;x の自然対数を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T log2(T x)&lt;/td&gt;
&lt;td&gt;x の 2 を底とする対数を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T log10(T x)&lt;/td&gt;
&lt;td&gt;x の 10 を底とする対数を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fmax(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の最大値を返す&lt;br&gt;片方の引数が NaN なら NaN では無い方の値を返す&lt;br&gt;両方が NaN なら NaN を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fmin(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の最小値を返す&lt;br&gt;片方の引数が NaN なら NaN では無い方の値を返す&lt;br&gt;両方が NaN なら NaN を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T modf(T x, T &amp;amp;intval)&lt;/td&gt;
&lt;td&gt;x を同じ符号を持つ整数部と少数部に分ける&lt;br&gt;少数部を返り値で、整数部を intval で返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T pow(T x, T y)&lt;/td&gt;
&lt;td&gt;x ^ y を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T powr(T x, T y)&lt;/td&gt;
&lt;td&gt;x &amp;gt;= 0 の x ^ y を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T rint(T x)&lt;/td&gt;
&lt;td&gt;x を最近接偶数へ丸めた整数値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T round(T x)&lt;/td&gt;
&lt;td&gt;x を直近の整数値に丸めて返す&lt;br&gt;半分の場合は 0 に近い方となる&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T rsqrt(T x)&lt;/td&gt;
&lt;td&gt;x の平方根の逆数を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T sin(T x)&lt;/td&gt;
&lt;td&gt;x のサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T sincos(T x, T &amp;amp;cosval)&lt;/td&gt;
&lt;td&gt;x のサインとコサインを計算する&lt;br&gt;サインを返り値で、コサインを cosval で返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T sinh(T x)&lt;/td&gt;
&lt;td&gt;x のハイパボリックサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T sinpi(T x)&lt;/td&gt;
&lt;td&gt;pi * x のサインを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T sqrt(T x)&lt;/td&gt;
&lt;td&gt;x の平方根を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T tan(T x)&lt;/td&gt;
&lt;td&gt;x のタンジェントを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T tanh(T x)&lt;/td&gt;
&lt;td&gt;x のハイパボリックタンジェントを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T tanpi(T x)&lt;/td&gt;
&lt;td&gt;pi * x のタンジェントを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T trunc(T x)&lt;/td&gt;
&lt;td&gt;x を 0 に近い方向へ丸めた値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;行列関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;行列関数&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;float determinant(floatnxn)&lt;br&gt;half determinant(halfnxn)&lt;/td&gt;
&lt;td&gt;行列式を返す&lt;br&gt;行列は正方行列でなければならない&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;floatmxn transpose(floatnxm)&lt;br&gt;halfmxn transpose(halfnxm)&lt;/td&gt;
&lt;td&gt;転置行列を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;幾何関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;幾何関数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;T は浮動小数点数(floatn / halfn)のベクター&lt;/li&gt;
&lt;li&gt;Ts はベクターに対応するスカラー&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T cross(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の外積を返す&lt;br&gt;T は3次元ベクトルでなければならない&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ts distance(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の距離を求める&lt;br&gt;length(x - y) を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ts distance_squared(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の距離の平方を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ts dot(T x, T y)&lt;/td&gt;
&lt;td&gt;x と y の内積を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T faceforward(T N, T I, T Nref)&lt;/td&gt;
&lt;td&gt;dot(Nref, I) &amp;lt; 0.0 で N&lt;br&gt;それ以外は -N を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ts length(T x)&lt;/td&gt;
&lt;td&gt;x のベクトルの長さを返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ts length_squared(T x)&lt;/td&gt;
&lt;td&gt;x のベクトルの長さの平方を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T normalize(T x)&lt;/td&gt;
&lt;td&gt;x の正規化した値を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T reflect(T I, T N)&lt;/td&gt;
&lt;td&gt;入射ベクトル I と面の法線ベクトル N から、反射ベクトル I – 2 * dot(N, I) * N を返す&lt;br&gt;N は正規されていなければならない&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T refract(T I, T N, Ts eta)&lt;/td&gt;
&lt;td&gt;入射ベクトル I と面の法線ベクトル N と屈折率 eta から、屈折ベクトルを返す&lt;br&gt;I と N  は正規されていなければならない&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;グラフィック関数:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;グラフィック関数&lt;/h2&gt;

&lt;h3 id=&#34;フラグメントシェーダ:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;フラグメントシェーダ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;T はfloat, float2, float3, float4, half, half2, half3, half4&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metal&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HLSL&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;GLSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T dfdx(T p)&lt;/td&gt;
&lt;td&gt;スクリーン空間の指定された x 座標に対する高精度の偏微分を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ddx&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dFdxFine&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T dfdy(T p)&lt;/td&gt;
&lt;td&gt;スクリーン空間の指定された y 座標に対する高精度の偏微分を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ddy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dFdyFine&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T fwidth(T p)&lt;/td&gt;
&lt;td&gt;fabs(dfdx(p)) + fabs(dfdy(p)) を返す&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;感想:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;さすが後発なだけあって、全部入り。GLSLをベースにHLSLやらOpenCLからありったけ詰め込んだような感じ。&lt;/p&gt;

&lt;h1 id=&#34;参考リンク:4dfc7da6cd3b1c47c8c108751f0fee0c&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;公式：&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Metal/Reference/MetalShadingLanguageGuide/std-lib/std-lib.html&#34;&gt;Metal Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenGL4.5：&lt;a href=&#34;https://www.opengl.org/sdk/docs/reference_card/opengl45-reference-card.pdf&#34;&gt;API Reference Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DirectX：&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/bb509611.aspx&#34;&gt;組み込み関数 (DirectX HLSL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo利用方法メモ</title>
      <link>https://mike-neko.github.io/blog/hugo-memo/</link>
      <pubDate>Wed, 20 Jan 2016 22:48:33 +0900</pubDate>
      
      <guid>https://mike-neko.github.io/blog/hugo-memo/</guid>
      <description>

&lt;p&gt;初めはOctopressを使ってたものの、シンタックスハイライトがどうもうまく好みにならなかったので、結局、１週間ほどでHugoに乗り換え。Octopressに比べると構成もわかりやすいし、最新の資料が多くてよかった。&lt;br /&gt;
テーマはなるべくシンプル、かつ、スマホでも見やすい&lt;a href=&#34;http://themes.gohugo.io/hyde-x/&#34;&gt;Hyde-X&lt;/a&gt;を選定。以下はHyde-Xの場合の設定なので、他のテーマでは変わることがあるので注意。&lt;/p&gt;

&lt;h2 id=&#34;初期設定:8d244dac89903f7d90007c69acaf707d&#34;&gt;初期設定&lt;/h2&gt;

&lt;h3 id=&#34;ローカルにディレクトリ作成:8d244dac89903f7d90007c69acaf707d&#34;&gt;ローカルにディレクトリ作成&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hugo new site &amp;lt;site-name&amp;gt;&lt;/code&gt;で作業用のローカルディレクトリを作成&lt;/li&gt;
&lt;li&gt;公開用ディレクトリを作成してGitを設定
&lt;code&gt;
cd &amp;lt;site-name&amp;gt;
mkdir public
git remote add origin https://github.com/&amp;lt;github name&amp;gt;/&amp;lt;github name&amp;gt;.github.io.git
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;を&lt;a href=&#34;https://github.com/github/gitignore&#34;&gt;https://github.com/github/gitignore&lt;/a&gt; から落としてきて、2の&lt;code&gt;public&lt;/code&gt;の中に置く。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;記事のテンプレを作成:8d244dac89903f7d90007c69acaf707d&#34;&gt;記事のテンプレを作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/archetypes&lt;/code&gt;に&lt;code&gt;default.md&lt;/code&gt;を作成する。&lt;br /&gt;
内容は以下の感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date = &amp;quot;now()&amp;quot;
draft = true
slug = &amp;quot;&amp;quot;
title = &amp;quot;&amp;quot;
categories = []
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configを編集:8d244dac89903f7d90007c69acaf707d&#34;&gt;configを編集&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/config.toml&lt;/code&gt;を環境に合わせて編集する。&lt;br /&gt;
（設定方法はテーマのREADME.mdを参照）&lt;/p&gt;

&lt;h3 id=&#34;highlight-jsをカスタマイズ:8d244dac89903f7d90007c69acaf707d&#34;&gt;highlight.jsをカスタマイズ&lt;/h3&gt;

&lt;p&gt;デフォルトで入っていた分ではSwiftが未対応。。。まぁ基本的にはGistを使う予定だけど、一応使えるように。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlightjs公式&lt;/a&gt;で使いそうなものだけを選択してカスタムパッケージをDL&lt;/li&gt;
&lt;li&gt;DLしたものの中から&lt;code&gt;highlight.pack.js&lt;/code&gt;を&lt;code&gt;&amp;lt;site-name&amp;gt;/themes/hyde-x/static/js/highlight.pack.js&lt;/code&gt;と丸ごと置き換え&lt;/li&gt;
&lt;li&gt;カラースタイルもついでにXcodeにしたいので、DLしたものの中から&lt;code&gt;xcode.css&lt;/code&gt;を&lt;code&gt;&amp;lt;site-name&amp;gt;/themes/hyde-x/static/css/highlight&lt;/code&gt;に追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt;の中の&lt;code&gt;highlight&lt;/code&gt;を&lt;code&gt;xcode&lt;/code&gt;に変更&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで、無事Swiftもハイライトされるようになった。&lt;/p&gt;

&lt;h3 id=&#34;gist埋め込みコードを設定:8d244dac89903f7d90007c69acaf707d&#34;&gt;Gist埋め込みコードを設定&lt;/h3&gt;

&lt;p&gt;普通にリンクをコピペしても良いのだけれども（&lt;del&gt;GistBoxを使い出したら逆にハッシュだけコピペするのが面倒だったり&lt;/del&gt;）、せっかくMarkdownで書いているのだから、あまりタグを入れて表記が揺らぐのも微妙なので。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;/layouts/shortcodes/gist.html&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;1のファイルに
&lt;code&gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://gist.github.com/{{ .Get 0 }}.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
を貼り付けて保存&lt;/li&gt;
&lt;li&gt;使いたい場所で&lt;br /&gt;
&lt;code&gt;
{{&amp;lt; gist gist_sha1_hash &amp;gt;}}
&lt;/code&gt;&lt;br /&gt;
とすると、
&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/5526bee6ee5efd2fc5a7.js&#34;&gt;&lt;/script&gt;
といった感じで埋め込まれる&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;記事の作成:8d244dac89903f7d90007c69acaf707d&#34;&gt;記事の作成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;site-name&amp;gt;&lt;/code&gt;直下で&lt;code&gt;hugo new post/&amp;lt;file-name&amp;gt;.md&lt;/code&gt;を実行する。&lt;/p&gt;

&lt;p&gt;プレビューは&lt;code&gt;hugo server -t Hyde-X -D -w&lt;/code&gt;を実行した後に、&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; へアクセス。&lt;/p&gt;

&lt;h2 id=&#34;公開手順:8d244dac89903f7d90007c69acaf707d&#34;&gt;公開手順&lt;/h2&gt;

&lt;h3 id=&#34;流れ:8d244dac89903f7d90007c69acaf707d&#34;&gt;流れ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hugo -t Hyde-X&lt;/code&gt;でサイトを生成&lt;br /&gt;
(データ一式がpublicに格納される)&lt;/li&gt;
&lt;li&gt;1のデータをGitで&lt;code&gt;commit&lt;/code&gt;して&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ただ、毎回これをやるのは面倒なので、シェルスクリプトにしておく。&lt;/p&gt;

&lt;h3 id=&#34;デプロイ用スクリプト:8d244dac89903f7d90007c69acaf707d&#34;&gt;デプロイ用スクリプト&lt;/h3&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://gist.github.com/3159af7dd05c6278a778.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;githubでの書き方:8d244dac89903f7d90007c69acaf707d&#34;&gt;GitHubでの書き方&lt;/h1&gt;

&lt;p&gt;参考リンク
&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub専用(公式)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考リンク:8d244dac89903f7d90007c69acaf707d&#34;&gt;参考リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotazi.com/blog/post/2015111301/&#34;&gt;【Hugo】Hosting on GitHub Pages【翻訳】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tanksuzuki.com/post/hugo-github-pages-1/&#34;&gt;Hugoでブログ作成 第一部：Hugoでブログを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cronally.com/embed-gists-with-hugo/&#34;&gt;Hugo Shortcode for Embedded Gists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>